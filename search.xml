<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>npm WARN config `--global`  are deprecated 解决办法</title>
      <link href="/posts/19423.html"/>
      <url>/posts/19423.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装nodejs之后，输入npm-v报错"><a href="#安装nodejs之后，输入npm-v报错" class="headerlink" title="安装nodejs之后，输入npm -v报错"></a>安装nodejs之后，输入npm -v报错</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install --global --production npm-windows-upgradenpm-windows-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>选8.12.1</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>0X00简述</p><p>我们知道Java是面向对象编程的，如果需要将某个对象存储起来以便长期使用，是需要使用到序列化以及反序列化的。那么什么是序列化以及为什么需要序列化。序列化分为两大部分：序列化和反序列化。<strong>Java序列化</strong>是指把Java对象转换为字节序列的过程；而<strong>Java反序列化</strong>是指把字节序列恢复为Java对象的过程。当有大量用户访问服务器时，服务器会出现大量的session，可能会造成内存紧张，这个时候需要将session序列化进硬盘，需要时再从硬盘中还原到内存中，这期间可能会造成一系列的安全问题。</p><p>0X01序列化的实现</p><p>这里有一个People类，只有实现了Serializable接口或者Externalizable接口的类的对象才能被序列化为字节序列。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"People{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单编写一个序列化和反序列化的小demo1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"S1mpleSerialize.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">People</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"S1mple"</span><span class="token punctuation">,</span><span class="token string">"Fucker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将要序列化的对象:"</span><span class="token operator">+</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> <span class="token class-name">S1mpleSerizlize</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">S1mpleSerizlize</span><span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> <span class="token class-name">S1mpleunSerialize</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">People</span> <span class="token class-name">S1mplePeople</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">)</span> <span class="token class-name">S1mpleunSerialize</span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反序列化后的对象:"</span><span class="token operator">+</span><span class="token class-name">S1mplePeople</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出样例：</p><pre class="line-numbers language-none"><code class="language-none">将要序列化的对象:People{age=1, name='S1mple', sex='Fucker'}反序列化后的对象:People{age=1, name='S1mple', sex='Fucker'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若是去掉implements Serializable 则会报</p><pre class="line-numbers language-none"><code class="language-none">Exception in thread "main" java.io.NotSerializableException<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跟一下Serializable接口可以看到Serializable时空的，不用去实现方法，只是一个标识。</p><p>可以看到无论是用什么权限标识符修饰(public/private/protected)的成员变量，他们都会被序列化和反序列化。</p><p>而静态变量是无需被序列化的。当恢复对象的时候，直接取类当前的静态变量即可。方法类似。若是属性是一个引用类型，则需要递归序列化。</p><p>0X02简单的问题</p><p>readObject() 是可以重写的，可以定制反序列化的一些行为。这就造成了一些安全问题。</p><p>例：我们在People类里重写readObject().</p><pre class="line-numbers language-none"><code class="language-none">private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException {    stream.defaultReadObject();    Runtime.getRuntime().exec("calc");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后再次执行demo1，会弹出计算器</p><p><img src="https://s2.loli.net/2022/03/20/HefwkEjsmOiDXKA.png" alt="image-20220320124800242.png"></p><p>对于readObject()的调用，我很好奇，于是跟进一下，发现在ObjectOutputStream类中328行，有一行注释说有个boolean值记录是否为readobject()重写。</p><pre class="line-numbers language-none"><code class="language-none">/** if true, invoke readObjectOverride() instead of readObject() */private final boolean enableOverride;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>右键点击enableOverride，点Find Usages跟到使用这个变量的代码处</p><p><img src="https://s2.loli.net/2022/03/20/1oTcsJqmp9w4NlO.png" alt="image-20220320130511962"></p><p>在全局搜索查看给enableOverride赋值的代码，发现了有参构造和无参构造，</p><pre class="line-numbers language-none"><code class="language-none">public ObjectInputStream(InputStream in) throws IOException {    verifySubclass();    bin = new BlockDataInputStream(in);    handles = new HandleTable(10);    vlist = new ValidationList();    serialFilter = ObjectInputFilter.Config.getSerialFilter();    enableOverride = false;    readStreamHeader();    bin.setBlockDataMode(true);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">protected ObjectInputStream() throws IOException, SecurityException {    SecurityManager sm = System.getSecurityManager();    if (sm != null) {        sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);    }    bin = null;    handles = null;    vlist = null;    serialFilter = ObjectInputFilter.Config.getSerialFilter();    enableOverride = true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>enableOverride决定后面调用readObjectOverride()还是readObject()方法，true时调用前者。</p><p>0X03序列化ID</p><p><code>serialVersionUID</code> 是用于在序列化和反序列化过程中进行核验的一个版本号，它决定着是否能够成功反序列化，java的序列化机制是通过判断运行时类的<code>serialVersionUID</code>来验证版本一致性的，在进行反序列化时，JVM会把传进来的字节流中的<code>serialVersionUID</code>与本地实体类中的<code>serialVersionUID</code>进行比较，如果相同则认为是一致的，便可以进行反序列化，否则就会报序列化版本不一致的异常，如果可序列化类没有声明<code>serialVersionUID</code>，则序列化运行时将根据类的各个方面计算该类的默认<code>serialVersionUID</code>值。</p><p>0X04结尾</p><p>反序列化漏洞和其他漏洞一样，需要触发条件，再代码审计时，可以通过搜索特定函数，定位到存在问题的代码块</p><pre class="line-numbers language-none"><code class="language-none">ObjectInputStream.readObjectObjectInputStream.readUnsharedXMLDecoder.readObjectYaml.load...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>0X00简述</p><p>我们知道Java是面向对象编程的，如果需要将某个对象存储起来以便长期使用，是需要使用到序列化以及反序列化的。那么什么是序列化以及为什么需要序列化。序列化分为两大部分：序列化和反序列化。<strong>Java序列化</strong>是指把Java对象转换为字节序列的过程；而<strong>Java反序列化</strong>是指把字节序列恢复为Java对象的过程。当有大量用户访问服务器时，服务器会出现大量的session，可能会造成内存紧张，这个时候需要将session序列化进硬盘，需要时再从硬盘中还原到内存中，这期间可能会造成一系列的安全问题。</p><p>0X01序列化的实现</p><p>这里有一个People类，只有实现了Serializable接口或者Externalizable接口的类的对象才能被序列化为字节序列。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"People{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单编写一个序列化和反序列化的小demo1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"S1mpleSerialize.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">People</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"S1mple"</span><span class="token punctuation">,</span><span class="token string">"Fucker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将要序列化的对象:"</span><span class="token operator">+</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> <span class="token class-name">S1mpleSerizlize</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">S1mpleSerizlize</span><span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> <span class="token class-name">S1mpleunSerialize</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">People</span> <span class="token class-name">S1mplePeople</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">)</span> <span class="token class-name">S1mpleunSerialize</span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反序列化后的对象:"</span><span class="token operator">+</span><span class="token class-name">S1mplePeople</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出样例：</p><pre class="line-numbers language-none"><code class="language-none">将要序列化的对象:People{age=1, name='S1mple', sex='Fucker'}反序列化后的对象:People{age=1, name='S1mple', sex='Fucker'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若是去掉implements Serializable 则会报</p><pre class="line-numbers language-none"><code class="language-none">Exception in thread "main" java.io.NotSerializableException<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跟一下Serializable接口可以看到Serializable时空的，不用去实现方法，只是一个标识。</p><p>可以看到无论是用什么权限标识符修饰(public/private/protected)的成员变量，他们都会被序列化和反序列化。</p><p>而静态变量是无需被序列化的。当恢复对象的时候，直接取类当前的静态变量即可。方法类似。若是属性是一个引用类型，则需要递归序列化。</p><p>0X02简单的问题</p><p>readObject() 是可以重写的，可以定制反序列化的一些行为。这就造成了一些安全问题。</p><p>例：我们在People类里重写readObject().</p><pre class="line-numbers language-none"><code class="language-none">private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException {    stream.defaultReadObject();    Runtime.getRuntime().exec("calc");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后再次执行demo1，会弹出计算器</p><p><img src="https://s2.loli.net/2022/03/20/HefwkEjsmOiDXKA.png" alt="image-20220320124800242.png"></p><p>对于readObject()的调用，我很好奇，于是跟进一下，发现在ObjectOutputStream类中328行，有一行注释说有个boolean值记录是否为readobject()重写。</p><pre class="line-numbers language-none"><code class="language-none">/** if true, invoke readObjectOverride() instead of readObject() */private final boolean enableOverride;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>右键点击enableOverride，点Find Usages跟到使用这个变量的代码处</p><p><img src="https://s2.loli.net/2022/03/20/1oTcsJqmp9w4NlO.png" alt="image-20220320130511962"></p><p>在全局搜索查看给enableOverride赋值的代码，发现了有参构造和无参构造，</p><pre class="line-numbers language-none"><code class="language-none">public ObjectInputStream(InputStream in) throws IOException {    verifySubclass();    bin = new BlockDataInputStream(in);    handles = new HandleTable(10);    vlist = new ValidationList();    serialFilter = ObjectInputFilter.Config.getSerialFilter();    enableOverride = false;    readStreamHeader();    bin.setBlockDataMode(true);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">protected ObjectInputStream() throws IOException, SecurityException {    SecurityManager sm = System.getSecurityManager();    if (sm != null) {        sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);    }    bin = null;    handles = null;    vlist = null;    serialFilter = ObjectInputFilter.Config.getSerialFilter();    enableOverride = true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>enableOverride决定后面调用readObjectOverride()还是readObject()方法，true时调用前者。</p><p>0X03序列化ID</p><p><code>serialVersionUID</code> 是用于在序列化和反序列化过程中进行核验的一个版本号，它决定着是否能够成功反序列化，java的序列化机制是通过判断运行时类的<code>serialVersionUID</code>来验证版本一致性的，在进行反序列化时，JVM会把传进来的字节流中的<code>serialVersionUID</code>与本地实体类中的<code>serialVersionUID</code>进行比较，如果相同则认为是一致的，便可以进行反序列化，否则就会报序列化版本不一致的异常，如果可序列化类没有声明<code>serialVersionUID</code>，则序列化运行时将根据类的各个方面计算该类的默认<code>serialVersionUID</code>值。</p><p>0X04结尾</p><p>反序列化漏洞和其他漏洞一样，需要触发条件，再代码审计时，可以通过搜索特定函数，定位到存在问题的代码块</p><pre class="line-numbers language-none"><code class="language-none">ObjectInputStream.readObjectObjectInputStream.readUnsharedXMLDecoder.readObjectYaml.load...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring_Study</title>
      <link href="/posts/32759.html"/>
      <url>/posts/32759.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Study"><a href="#Spring-Study" class="headerlink" title="Spring_Study"></a>Spring_Study</h1><h2 id="一、下载安装以及入门案例"><a href="#一、下载安装以及入门案例" class="headerlink" title="一、下载安装以及入门案例"></a>一、下载安装以及入门案例</h2><p>1.下载Spring框架</p><p><a href="https://repo.spring.io/artifactory/release/org/springframework/spring/5.2.6.RELEASE/">https://repo.spring.io/artifactory/release/org/springframework/spring/5.2.6.RELEASE/</a></p><p>2.IDEA创建普通java项目</p><p>3.导入如图jar包</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207261948312.png"></p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207261947534.png"></p><p>4.创建普通类</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207261945207.png"></p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207261944363.png"></p><p>5.创建测试类</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207261946703.png"></p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207261946014.png"></p><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>testdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpring5</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1加载spring配置文件</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2获取配置创建的对象</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>User实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>spring</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bean1.xml配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        配置User对象创建--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、IOC容器"><a href="#二、IOC容器" class="headerlink" title="二、IOC容器"></a>二、IOC容器</h2><h3 id="1-IOC底层原理"><a href="#1-IOC底层原理" class="headerlink" title="(1)IOC底层原理"></a>(1)IOC底层原理</h3><h4 id="1、什么是IOC"><a href="#1、什么是IOC" class="headerlink" title="1、什么是IOC"></a>1、什么是IOC</h4><p>(1)控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理.</p><p>(2)使用IOC目的：为了耦合度降低</p><p>(3)做入门案例就是IOC实现</p><h4 id="2、IOC底层原理"><a href="#2、IOC底层原理" class="headerlink" title="2、IOC底层原理"></a>2、IOC底层原理</h4><p>(1)xml解析、工厂模式、反射</p><h4 id="3、画图讲解IOC底层原理"><a href="#3、画图讲解IOC底层原理" class="headerlink" title="3、画图讲解IOC底层原理"></a>3、画图讲解IOC底层原理</h4><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207271754399.png" style="zoom:80%;"><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207271800570.png"><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207271805028.png"></p><h3 id="2-IOC接▣-BeanFactory"><a href="#2-IOC接▣-BeanFactory" class="headerlink" title="(2)IOC接▣(BeanFactory)"></a>(2)IOC接▣(BeanFactory)</h3><h4 id="1、IOC思想基于IOC容器完成，IOC容器底层就是对象工厂"><a href="#1、IOC思想基于IOC容器完成，IOC容器底层就是对象工厂" class="headerlink" title="1、IOC思想基于IOC容器完成，IOC容器底层就是对象工厂"></a>1、IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</h4><h4 id="2、Spring提供IOC容器实现两种方式：（两个接口）"><a href="#2、Spring提供IOC容器实现两种方式：（两个接口）" class="headerlink" title="2、Spring提供IOC容器实现两种方式：（两个接口）"></a>2、Spring提供IOC容器实现两种方式：（两个接口）</h4><p>(1)BeanFactory:IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用</p><p>加戟配置文件时候不会创建对象，在获取对象（使用）才去创建对象。</p><p>(2)ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用</p><p>加载配置文件时候就会把在配置文件对象进行创建</p><h4 id="3、Application-Context接口有实现类"><a href="#3、Application-Context接口有实现类" class="headerlink" title="3、Application Context接口有实现类"></a>3、Application Context接口有实现类</h4><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281341179.png"></p><p><strong>FileSystemXmlApplicationContext：C</strong>盘下面全路径</p><p><strong>ClassPathXmlApplicationContext：Src</strong>下目录</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281344243.png"></p><h3 id="3-IOC操作Bean管理（概念"><a href="#3-IOC操作Bean管理（概念" class="headerlink" title="(3)IOC操作Bean管理（概念)"></a>(3)IOC操作Bean管理（概念)</h3><h4 id="1、什么是Bean管理"><a href="#1、什么是Bean管理" class="headerlink" title="1、什么是Bean管理"></a>1、什么是Bean管理</h4><p>​    (0)Bean管理指的是两个操作<br>​    (1)Spring创建对象<br>​    (2)Spirng注入属性</p><h4 id="2、Bean管理操作有两种方式"><a href="#2、Bean管理操作有两种方式" class="headerlink" title="2、Bean管理操作有两种方式"></a>2、Bean管理操作有两种方式</h4><p>(1)基于xml配置文件方式实现.<br>(2)基于注解方式实现</p><h3 id="4-IOC操作Bean管理（基于xml方式）"><a href="#4-IOC操作Bean管理（基于xml方式）" class="headerlink" title="(4)IOC操作Bean管理（基于xml方式）"></a>(4)IOC操作Bean管理（基于xml方式）</h3><h4 id="1、基于xml方式创建对象"><a href="#1、基于xml方式创建对象" class="headerlink" title="1、基于xml方式创建对象"></a>1、基于xml方式创建对象</h4><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281353612.png"></p><p>(1)在spring配置文件中，使用bean标签，标签里面添加对应属性，就可以实现对象创建.</p><p>(2)在bean标签有很多属性，介绍常用的属性<br>*id属性：唯一标识，<br>*class属性：类全路径（包类路径）<br>*name：struct1用的，现在少了</p><p>(3)创建对象时候，默认也是执行无参数构造方法完成对象创建</p><h4 id="2、基于xml方式注入属性"><a href="#2、基于xml方式注入属性" class="headerlink" title="2、基于xml方式注入属性"></a>2、基于xml方式注入属性</h4><p>(1)DI:依赖注入，就是注入属性</p><p><em>spring动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</em></p><p>　　<em>简单来说什么是依赖注入，就是给属性赋值（包括基本数据类型和引用数据类型）</em></p><h4 id="3、第一种注入方式：使用st方法进行注入"><a href="#3、第一种注入方式：使用st方法进行注入" class="headerlink" title="3、第一种注入方式：使用st方法进行注入"></a>3、第一种注入方式：使用st方法进行注入</h4><p>(1)创建类，定义属性和对应的set方法</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281403111.png"></p><p>（2）在spring配置文件配置对象创建，配置属性注入，</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        配置User对象创建--&gt;</span><span class="token comment">&lt;!--    &lt;bean id="user" class="com.atguigu.spring.User"&gt;&lt;/bean&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        使用property标签完成属性注入--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>易筋经<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>易筋经<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、第二种注入方式：使用有参数构造进行注入"><a href="#4、第二种注入方式：使用有参数构造进行注入" class="headerlink" title="4、第二种注入方式：使用有参数构造进行注入"></a>4、第二种注入方式：使用有参数构造进行注入</h4><p>(1)创建类，定义属性，创建属性对应有参数构造方法</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281418227.png"></p><p>(2)在spring配置文件中进行配置</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281420215.png"></p><p>测试类：</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281422134.png"></p><h4 id="5、p名称空间注入"><a href="#5、p名称空间注入" class="headerlink" title="5、p名称空间注入"></a>5、p名称空间注入</h4><p>(1)使用p名称空间注入，可以简化基于xml配方式</p><p>第一步添加p名称空间在配置文件中</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281427472.png"></p><p>第二步进行属性注入，在bean标签里面进行操作</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281428655.png"></p><h3 id="5-IOC操作Bean管理-xml注入其他类型属性"><a href="#5-IOC操作Bean管理-xml注入其他类型属性" class="headerlink" title="(5)IOC操作Bean管理(xml注入其他类型属性)"></a>(5)IOC操作Bean管理(xml注入其他类型属性)</h3><p><strong>1、字面量，设置的固定值</strong></p><p>(1)null值</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281559295.png"></p><p>(2)属性值包含特殊符号</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281601143.png" alt="实体转义"></p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281602088.png" alt="CDATA"></p><p> <strong>2、注入属性-外部bean</strong></p><p>(1)创建两个类service类和dao类</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281613344.png" alt="Dao"></p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281618753.png" alt="Service"></p><p>(2)在service调用dao里面的方法</p><p>(3)在spring配置文件中进行配置</p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281623334.png" alt="配置文件"></p><p><img src="https://raw.githubusercontent.com/IMNU-S1mple/images/main/img/202207281626688.png" alt="测试类"></p><p><strong>3、注入属性-内部bean和级联</strong></p><p> 注入属性-内部bean</p><p>（1）一对多关系：部门和员工<br>一个部门有多个员工，一个员工属于一个部门（部门是一，员工是多）<br>（2）在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//部门类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> dname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDname</span><span class="token punctuation">(</span><span class="token class-name">String</span> dname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> dname<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//员工类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ename<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>    <span class="token comment">//员工属于某一个部门，使用对象形式表示</span>    <span class="token keyword">private</span> <span class="token class-name">Dept</span> dept<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDept</span><span class="token punctuation">(</span><span class="token class-name">Dept</span> dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEname</span><span class="token punctuation">(</span><span class="token class-name">String</span> ename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）在spring配置文件中配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--内部bean--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.Emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--设置两个普通属性--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Andy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--设置对象类型属性--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.Dept<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--内部bean赋值--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>宣传部门<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入属性-级联赋值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--方式一：级联赋值--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.Emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--设置两个普通属性--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Andy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--级联赋值--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.Dept<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>公关部门<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方式二：生成dept的get方法（get方法必须有！！）</span>   <span class="token keyword">public</span> <span class="token class-name">Dept</span> <span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> dept<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--级联赋值--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.Emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--设置两个普通属性--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jams<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--级联赋值--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept.dname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>技术部门<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.Dept<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-IOC操作Bean管理（xml注入集合属性）"><a href="#6-IOC操作Bean管理（xml注入集合属性）" class="headerlink" title="(6)IOC操作Bean管理（xml注入集合属性）"></a>(6)IOC操作Bean管理（xml注入集合属性）</h3><p>1、注入数组类型属性 </p><p>2、注入 List 集合类型属性 </p><p>3、注入 Map 集合类型属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//（1）创建类，定义数组、list、map、set 类型属性，生成对应 set 方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu</span> <span class="token punctuation">{</span>    <span class="token comment">//1 数组类型属性</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">;</span>    <span class="token comment">//2 list集合类型属性</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token comment">//3 map集合类型属性</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> maps<span class="token punctuation">;</span>    <span class="token comment">//4 set集合类型属性</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sets<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSets</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sets<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sets <span class="token operator">=</span> sets<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCourses</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>courses <span class="token operator">=</span> courses<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaps</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> maps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maps <span class="token operator">=</span> maps<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>（<span class="token number">2</span>）在 spring 配置文件进行配置<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"stu"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.atguigu.spring5.collectiontype.Stu"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数组类型属性注入<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"courses"</span><span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>array<span class="token punctuation">&gt;</span></span>                <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>java课程<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>                <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>数据库课程<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>array<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>list类型属性注入<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"list"</span><span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>list<span class="token punctuation">&gt;</span></span>                <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>张三<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>                <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>小三<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>map类型属性注入<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maps"</span><span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>map<span class="token punctuation">&gt;</span></span>                <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"JAVA"</span> value<span class="token operator">=</span><span class="token string">"java"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>entry<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"PHP"</span> value<span class="token operator">=</span><span class="token string">"php"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>entry<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>map<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>set类型属性注入<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sets"</span><span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>set<span class="token punctuation">&gt;</span></span>                <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token class-name">MySQL</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>                <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token class-name">Redis</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在集合里面设置对象类型值</strong></p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//学生所学多门课程</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Course</span><span class="token punctuation">&gt;</span></span> courseList<span class="token punctuation">;</span><span class="token comment">//创建集合</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCourseList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Course</span><span class="token punctuation">&gt;</span></span> courseList<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>courseList <span class="token operator">=</span> courseList<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--创建多个course对象--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.collectiontype.Course<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Spring5框架<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.collectiontype.Course<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis框架<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--注入list集合类型，值是对象--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>courseList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--第一步：在 spring 配置文件中引入名称空间 util--&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>util</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span> <span class="token attr-name">&lt;!--添加util名称空间--</span><span class="token punctuation">&gt;</span></span>       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"&gt;  <span class="token comment">&lt;!--添加util名称空间--&gt;</span>    <span class="token comment">&lt;!--第二步：使用 util 标签完成 list 集合注入提取--&gt;</span><span class="token comment">&lt;!--把集合注入部分提取出来--&gt;</span> <span class="token comment">&lt;!--1 提取list集合类型属性注入--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>list</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>易筋经<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>九阴真经<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>九阳神功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>list</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--2 提取list集合类型属性注入使用--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.collectiontype.Book<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-IOC操作Bean管理（FactoryBean）"><a href="#7-IOC操作Bean管理（FactoryBean）" class="headerlink" title="(7)IOC操作Bean管理（FactoryBean）"></a>(7)IOC操作Bean管理（<strong>FactoryBean</strong>）</h3><p>1、Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</p><p> 2、普通 bean：在配置文件中定义 bean 类型就是返回类型</p><p> 3、工厂 bean：在配置文件定义 bean 类型可以和<strong>返回类型不一样</strong> </p><p><strong>第一步 创建类，让这个类作为工厂 bean，实现接口 FactoryBean</strong><br><strong>第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Course</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">//定义返回bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Course</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Course</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        course<span class="token punctuation">.</span><span class="token function">setCname</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> course<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.factorybean.MyBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean3.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Course</span> course <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"myBean"</span><span class="token punctuation">,</span> <span class="token class-name">Course</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值类型可以不是定义的bean类型！</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-IOC操作Bean管理（bean-作用域）"><a href="#8-IOC操作Bean管理（bean-作用域）" class="headerlink" title="(8)IOC操作Bean管理（bean 作用域）"></a>(8)IOC操作Bean管理（<strong>bean 作用域</strong>）</h3><p> 在 Spring 里面，默认情况下，bean 是单实例对象，下面进行作用域设置：</p><blockquote><p>（1）在 spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例</p><p>（2）scope 属性值 第一个值 默认值，singleton，表示是单实例对象 第二个值 prototype，表示是多实例对象</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.collectiontype.Book<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--设置为多实例--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>（3）singleton 和 prototype 区别</p><p> a）singleton 单实例，prototype 多实例</p><p> b）设置 scope 值是 singleton 时候，<strong>加载 spring 配置文件时候就会创建单实例对象</strong> ；设置 scope 值是 prototype 时候，不是在加载 spring 配置文件时候创建对象，<strong>在调用 getBean 方法时候创建多实例对象</strong></p></blockquote><h3 id="9-IOC操作Bean管理（bean-生命周期）"><a href="#9-IOC操作Bean管理（bean-生命周期）" class="headerlink" title="(9)IOC操作Bean管理（bean 生命周期）"></a>(9)IOC操作Bean管理（<strong>bean 生命周期</strong>）</h3><blockquote><p>1、生命周期 ：从对象创建到对象销毁的过程</p><p>2、bean 生命周期</p><p> （1）通过构造器创建 bean 实例（无参数构造）</p><p> （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p> （3）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p> （4）bean 可以使用了（对象获取到了）</p><p> （5）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><p>3、演示 bean 生命周期 ：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">{</span> <span class="token comment">//无参数构造</span> <span class="token keyword">public</span> <span class="token class-name">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步 执行无参数构造创建 bean 实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token class-name">String</span> oname<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOname</span><span class="token punctuation">(</span><span class="token class-name">String</span> oname<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oname <span class="token operator">=</span> oname<span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步 调用 set 方法设置属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//创建执行的初始化的方法</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步 执行初始化的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//创建执行的销毁的方法</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第五步 执行销毁的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPost</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span><span class="token comment">//创建后置处理器实现类</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在初始化之前执行的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在初始化之后执行的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置文件的bean参数配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.Orders<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initMethod<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroyMethod<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--配置初始化方法和销毁方法--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>手机<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--这里就是通过set方式（注入属性）赋值--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--配置后置处理器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBeanPost<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.MyBeanPost<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBean3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// ApplicationContext context =</span><span class="token comment">// new ClassPathXmlApplicationContext("bean4.xml");</span> <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean4.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Orders</span> orders <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">,</span> <span class="token class-name">Orders</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四步 获取创建 bean 实例对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//手动让 bean 实例销毁</span> context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>4、bean 的后置处理器，bean 生命周期有七步 （正常生命周期为五步，而配置后置处理器后为七步）</p><p> （1）通过构造器创建 bean 实例（无参数构造）</p><p> （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</p><p> （3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</p><p> （4）调用 bean 的初始化的方法（需要进行配置初始化的方法）</p><p> （5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</p><p> （6）bean 可以使用了（对象获取到了）</p><p> （7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p></blockquote><h3 id="IOC操作Bean管理（外部属性文件）"><a href="#IOC操作Bean管理（外部属性文件）" class="headerlink" title="()IOC操作Bean管理（外部属性文件）"></a>()IOC操作Bean管理（<strong>外部属性文件</strong>）</h3><h3 id="IOC操作Bean管理（基于注解）"><a href="#IOC操作Bean管理（基于注解）" class="headerlink" title="()IOC操作Bean管理（基于注解）"></a>()IOC操作Bean管理（基于注解）</h3><h2 id="三、Aop"><a href="#三、Aop" class="headerlink" title="三、Aop"></a>三、Aop</h2><h2 id="四、-dbcTemplate"><a href="#四、-dbcTemplate" class="headerlink" title="四、]dbcTemplate"></a>四、]dbcTemplate</h2><h2 id="五、事务管理"><a href="#五、事务管理" class="headerlink" title="五、事务管理"></a>五、事务管理</h2><h2 id="六、Spring5新特性e"><a href="#六、Spring5新特性e" class="headerlink" title="六、Spring5新特性e"></a>六、Spring5新特性e</h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单HttpServer</title>
      <link href="/posts/4455.html"/>
      <url>/posts/4455.html</url>
      
        <content type="html"><![CDATA[<h1 id="简单SttpServer实现"><a href="#简单SttpServer实现" class="headerlink" title="简单SttpServer实现"></a>简单SttpServer实现</h1><h4 id="实现了文件包含的功能"><a href="#实现了文件包含的功能" class="headerlink" title="实现了文件包含的功能"></a>实现了文件包含的功能</h4><p>目录结构:</p><p><img src="https://s2.loli.net/2022/03/07/MHiLkYfZ5TDURyv.png" alt="image-20220307174848582"></p><p>需要的依赖：JDK11,Tomcat10.0</p><h4 id="class-SimpleHttpServer"><a href="#class-SimpleHttpServer" class="headerlink" title="class SimpleHttpServer:"></a>class SimpleHttpServer:</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">simplehttpserver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TimeZone</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleHttpServer</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> HTTP_SERVER_PORT <span class="token operator">=</span> <span class="token number">12288</span><span class="token punctuation">;</span><span class="token comment">// 新建一个容量为10的线程池</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> exService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Simple HTTP Server Start!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在服务器上打开HTTP_SERVER_PORT端口，用以监听客户端发过来的TCP连接</span><span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>HTTP_SERVER_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在此循环中不断处理TCP连接请求，每次循环处理一个请求</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 服务端socket接受客户端连接请求</span><span class="token class-name">Socket</span> clientSocket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用其他线程去处理Http请求</span>exService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 得到客户数据的输入流</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>inputStream <span class="token operator">=</span> clientSocket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解析得到Http请求</span><span class="token class-name">HttpRequest</span> httpRequest <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 产生应答</span><span class="token class-name">HttpResponse</span> httpResponse <span class="token operator">=</span> <span class="token function">buildResponse</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> clientSocket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>httpResponse<span class="token punctuation">.</span><span class="token function">writeToClient</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token class-name">HttpResponse</span> <span class="token function">buildResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">HttpResponse</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span>httpVersion <span class="token operator">=</span> request<span class="token punctuation">.</span>httpVersion<span class="token punctuation">;</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token string">"200"</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Server"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"My Java Simple HTTP Server"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"EEE, dd MMM yyyy HH:mm:ss 'GMT'"</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>US<span class="token punctuation">)</span><span class="token punctuation">;</span>dateFormat<span class="token punctuation">.</span><span class="token function">setTimeZone</span><span class="token punctuation">(</span><span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token string">"GMT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Date"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从URL中的f查询参数中获得客户端需要的文件路径</span><span class="token class-name">String</span> outFilePath <span class="token operator">=</span> request<span class="token punctuation">.</span>queryParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> outFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>outFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 为了价钱服务器安全，禁止客户端读取非D盘下的文件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>outFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"d:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>outFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>outFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 将文件的所有内容读到一个字节数组中</span><span class="token class-name">FileInputStream</span> fsStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>outFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> out <span class="token operator">=</span> fsStream<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fsStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// 客户端需要的文件不存在</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token string">"404"</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token string">"Not Found"</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Not Found!"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="class-HttpResponse"><a href="#class-HttpResponse" class="headerlink" title="class HttpResponse:"></a>class HttpResponse:</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">simplehttpserver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStreamWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpResponse</span> <span class="token punctuation">{</span><span class="token class-name">String</span> httpVersion<span class="token punctuation">;</span><span class="token class-name">String</span> statusCode<span class="token punctuation">;</span><span class="token class-name">String</span> desc<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToClient</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> outputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写响应行</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>httpVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写响应头</span><span class="token function">writeHeaders</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写空行</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写响应体</span>outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 把响应头全部写到客户端 *  * @param writer * @throws IOException */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeHeaders</span><span class="token punctuation">(</span><span class="token class-name">BufferedWriter</span> writer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> headers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> headerName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> headerValue <span class="token operator">:</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>headerName <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> headerValue <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHttpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> httpVersion<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHttpVersion</span><span class="token punctuation">(</span><span class="token class-name">String</span> httpVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>httpVersion <span class="token operator">=</span> httpVersion<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> statusCode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> statusCode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusCode <span class="token operator">=</span> statusCode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> desc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> headers<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeaders</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> headers<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> body<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBody</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span><span class="token comment">// 自动维护Content-Length头的值</span><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="class-HttpResquest"><a href="#class-HttpResquest" class="headerlink" title="class HttpResquest:"></a>class HttpResquest:</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">simplehttpserver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLDecoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpRequest</span> <span class="token punctuation">{</span><span class="token class-name">String</span> method<span class="token punctuation">;</span><span class="token class-name">String</span> uri<span class="token punctuation">;</span><span class="token class-name">String</span> httpVersion<span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">;</span><span class="token class-name">String</span> body<span class="token punctuation">;</span><span class="token comment">// URL中的查询参数</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queryParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpRequest</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">HttpRequest</span> httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 为了文本字符串的读取方便，将inputStream转换为BufferedReader</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> requestLine <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">parseRequestLine</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">,</span> requestLine<span class="token punctuation">)</span><span class="token punctuation">;</span>httpRequest<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token function">parseHeaders</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从uri中提取查询参数</span><span class="token comment">// 以？分割uri字符串</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span>uri<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parts<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> params <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramParts <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> paramPart <span class="token operator">:</span> paramParts<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> param <span class="token operator">=</span> paramPart<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> paramName <span class="token operator">=</span> param<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span> paramValue <span class="token operator">=</span> param<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>httpRequest<span class="token punctuation">.</span>queryParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>paramName<span class="token punctuation">,</span> paramValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> httpRequest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parseRequestLine</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> httpRequest<span class="token punctuation">,</span> <span class="token class-name">String</span> requestLine<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">{</span><span class="token comment">// 分析请求行的各个字段</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> requestLineParts <span class="token operator">=</span> requestLine<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> method <span class="token operator">=</span> requestLineParts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span> uri <span class="token operator">=</span> requestLineParts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 对编码后的URL进行解码</span>uri <span class="token operator">=</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> httpVersion <span class="token operator">=</span> requestLineParts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>httpRequest<span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span>httpRequest<span class="token punctuation">.</span>uri <span class="token operator">=</span> uri<span class="token punctuation">;</span>httpRequest<span class="token punctuation">.</span>httpVersion <span class="token operator">=</span> httpVersion<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseHeaders</span><span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token comment">// 为了保留HTTP请求头的读取顺序，这里使用TreeMap，而不是HashMap</span><span class="token comment">// 一个请求头名可以对应多个值</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> headerLine <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>headerLine<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts <span class="token operator">=</span> headerLine<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> headerName <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 把headerName左右两端的空格删掉</span>headerName <span class="token operator">=</span> headerName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> headerValue <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 把headerValue左右两端的空格删掉</span>headerValue <span class="token operator">=</span> headerValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headerValues <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 查看headers中之前是否已经存储过headerName对应的请求头</span><span class="token keyword">if</span> <span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>headerName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>headerValues <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>headerName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>headerValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>headerValues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>headerValue<span class="token punctuation">)</span><span class="token punctuation">;</span>headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>headerName<span class="token punctuation">,</span> headerValues<span class="token punctuation">)</span><span class="token punctuation">;</span>headerLine <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> headers<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> headers<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeaders</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> headers<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> method<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> uri<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUri</span><span class="token punctuation">(</span><span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>uri <span class="token operator">=</span> uri<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHttpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> httpVersion<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHttpVersion</span><span class="token punctuation">(</span><span class="token class-name">String</span> httpVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>httpVersion <span class="token operator">=</span> httpVersion<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> body<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBody</span><span class="token punctuation">(</span><span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:java1.8中FileInputStream这个类是没有readAllBytes这个方法的，需要换成换成高版本，但是我的IDEA.2020不支持14以上版本，就换成了java11.</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE</title>
      <link href="/posts/14085.html"/>
      <url>/posts/14085.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaSE的查缺补漏"><a href="#JavaSE的查缺补漏" class="headerlink" title="JavaSE的查缺补漏"></a>JavaSE的查缺补漏</h1><p>java代码执行过程</p><p><img src="https://s2.loli.net/2022/03/04/8FJgH4rDTNzqtdl.png" alt="image-20220304151458459"></p><p>把java代码编译成字节码文件，JVM所认识的文件，并运行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">javac a<span class="token punctuation">.</span>javajava a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDN网络</title>
      <link href="/posts/43734.html"/>
      <url>/posts/43734.html</url>
      
        <content type="html"><![CDATA[<p>SDN(软件定义网络)</p><p>应用案例</p><p>Google：改造B4网络</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLMAP入门</title>
      <link href="/posts/9656.html"/>
      <url>/posts/9656.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQLMAP入门"><a href="#SQLMAP入门" class="headerlink" title="SQLMAP入门"></a>SQLMAP入门</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.下载sqlmap和python2(kali自带)</p><p>python2:<a href="https://www.python.org/downloads/release/python-2715/">https://www.python.org/downloads/release/python-2715/</a></p><p>sqlmap:<a href="http://sqlmap.org/">http://sqlmap.org/</a></p><h2 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h2><p>1.验证是否存在</p><p>-u:指定url</p><pre class="line-numbers language-sqlmap" data-language="sqlmap"><code class="language-sqlmap">sqlmap.py -u "url"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.跑数据</p><p>获取数据库</p><pre class="line-numbers language-sqlmap" data-language="sqlmap"><code class="language-sqlmap">sqlmap.py -u "url" --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取当前网站数据库名字</p><pre class="line-numbers language-sqlmap" data-language="sqlmap"><code class="language-sqlmap">sqlmap.py -u "url" --current-db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取库下面的表名字</p><pre class="line-numbers language-sqlmap" data-language="sqlmap"><code class="language-sqlmap">sqlmap.py -u "url" --tables -D"数据库名"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取表下面的列名</p><pre class="line-numbers language-sqlmap" data-language="sqlmap"><code class="language-sqlmap">sqlmap.py -u "url" --columns -T "表名" -D "数据库名"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导出数据</p><pre class="line-numbers language-sqlmap" data-language="sqlmap"><code class="language-sqlmap">sqlmap.py -u "url" -C "列名" -T"表名" -D "数据库名"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> cookie注入</p><p>level=2，sqlmap会进行cookie注入</p><p>leve=3以上，sqlmap会进行UA，refer注入</p><pre class="line-numbers language-sqlmap" data-language="sqlmap"><code class="language-sqlmap">sqlmap.py -u "url" --cookie "uid=1" --level=2(1-5)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>post注入</p><p>1.配合BP请求抓包</p><p>然后</p><pre class="line-numbers language-sqlmap" data-language="sqlmap"><code class="language-sqlmap">sqlmap.py -r 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.自动搜索表单尝试注入</p><pre class="line-numbers language-sqlmap" data-language="sqlmap"><code class="language-sqlmap">sqlmap.py -u "url" --forms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他</p><pre class="line-numbers language-sqlmap" data-language="sqlmap"><code class="language-sqlmap">-is-dba 当前用户权限（是否为root权限）-dbs 所有数据库-current-db 网站当前数据库-users 所有数据库用户-current-user 当前数据库用户-random-agent 构造随机user-agent-passwords 数据库密码-proxy http://local:8080 –threads 10 (可以自定义线程加速) 代理-time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）-user-agent=AGENT 指定 HTTP User – Agent头-random-agent 使用随机选定的HTTP User – Agent头-referer=REFERER 指定 HTTP Referer头-headers=HEADERS 换行分开，加入其他的HTTP头-b, –banner 检索数据库管理系统的标识-current-user 检索数据库管理系统当前用户-current-db 检索数据库管理系统当前数据库-is-dba 检测DBMS当前用户是否DBA-users 枚举数据库管理系统用户-passwords 枚举数据库管理系统用户密码哈希-privileges 枚举数据库管理系统用户的权限-roles 枚举数据库管理系统用户的角色-dbs 枚举数据库管理系统数据库-D DBname 要进行枚举的指定数据库名-T TBLname 要进行枚举的指定数据库表（如：-T tablename –columns）-tables 枚举的DBMS数据库中的表-columns 枚举DBMS数据库表列-dump 转储数据库管理系统的数据库中的表项-dump-all 转储所有的DBMS数据库表中的条目-search 搜索列（S），表（S）和/或数据库名称（S）-C COL 要进行枚举的数据库列-U USER 用来进行枚举的数据库用户-exclude-sysdbs 枚举表时排除系统数据库-start=LIMITSTART 第一个查询输出进入检索-stop=LIMITSTOP 最后查询的输出进入检索-first=FIRSTCHAR 第一个查询输出字的字符检索-last=LASTCHAR 最后查询的输出字字符检索-sql-query=QUERY 要执行的SQL语句-sql-shell 提示交互式SQL的shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>1.网站必须是root权限</p><p>2.需要知道网站的绝对路径</p><p>3.GPC为off，php主动转义的功能关闭</p><p>4.My.ini secure_file_priv=””</p><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5><p>–file-read  #读取指定文件<br> –file-write  #写入本地文件<br> –file-dest  #要写入的文件绝对路径 </p><h5 id="命令执行（拿shell）"><a href="#命令执行（拿shell）" class="headerlink" title="命令执行（拿shell）"></a>命令执行（拿shell）</h5><p>–os-cmd=whoami  #执行系统命令<br> –os-shell   #系统交互shell</p><h5 id="和msf联动"><a href="#和msf联动" class="headerlink" title="和msf联动"></a>和msf联动</h5><p>–os-pwn    #反弹shell(–os-pwn –msf-path=/opt/framework/msf3/) </p><h5 id="命令执行的原理"><a href="#命令执行的原理" class="headerlink" title="命令执行的原理"></a>命令执行的原理</h5><p>Sqlmap会传上去两个文件来自动上传文件，自动执行命令。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> sql_inject </tag>
            
            <tag> sqlmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>main静态方法为什么不能直接调用非静态方法、字段或属性</title>
      <link href="/posts/4.html"/>
      <url>/posts/4.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Greet</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token comment">//动态方法</span>    <span class="token punctuation">{</span>        <span class="token class-name">Console<span class="token punctuation">.</span>WriteLine</span><span class="token punctuation">(</span><span class="token string">"早上好，"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token comment">//静态方法</span>    <span class="token punctuation">{</span>        <span class="token class-name">Greet</span><span class="token punctuation">(</span><span class="token string">"bobo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错：对象对于非静态的字段、方法或属性“Program.Greet(string)”是必需的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上例所示，主函数Main函数为静态方法，当在其方法内部直接调用本类Program中的动态方法Greet时，编辑器会报错提示 :</p><blockquote><p>对象对于非静态的字段、方法或属性“Program.Greet(string)”是必需的**</p></blockquote><p>意思是静态方法中不能直接引用动态方法，为什么呢？？？</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>首先我们需要搞清楚静态方法和动态方法的区别：</p><p>静态方法是类的成员，创建后储存在内存中，占内存，但调用速度块，又叫<strong>类方法</strong></p><p>动态方法不是类的成员，要调用必须先声明类的实例（也就是new一个类）后，通过类的实例调用，调用完后，立即释放类，节省内存。</p><p>此例中静态方法main不能在自己的方法中直接调用本类中的动态方法Greet，我们可以想想如果系统允许调用，会发生什么：</p><p>如果静态方法Main中可以直接调用动态方法Greet，当Program类外部的一个类，通过Program直接调用Main（因为Main是静态方法，可以通过当Program类调用），也就相当于可以调用静态方法Main中的动态方法Greet了，而不需要对类进行实例化，这种调用在系统运行时也会报异常，因此为防止更多异常发生，系统选择在编译阶段一开始就禁止使用此种调用，提前发现并规避错误。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>问题的原因已经搞明白了，解决方案也就不言而喻了，当我们想要在静态方法中调用动态方法时，需要对类进行实例化，再通过类来调用<br> 代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Greet</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token comment">//动态方法</span>    <span class="token punctuation">{</span>        <span class="token class-name">Console<span class="token punctuation">.</span>WriteLine</span><span class="token punctuation">(</span><span class="token string">"早上好，"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token comment">//静态方法</span>    <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Greet</span><span class="token punctuation">(</span><span class="token string">"bobo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者本例中就是要调用Greet方法，也可将Greet方法改为静态方法，就可以直接进行调用了<br>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Greet</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token comment">//改为静态方法</span>    <span class="token punctuation">{</span>        <span class="token class-name">Console<span class="token punctuation">.</span>WriteLine</span><span class="token punctuation">(</span><span class="token string">"早上好，"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token comment">//静态方法</span>    <span class="token punctuation">{</span>        <span class="token class-name">Greet</span><span class="token punctuation">(</span><span class="token string">"bobo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接调用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述讲了静态方法，静态变量和属性的原理与方法类似</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> Grammer </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在python2和python3同时存在的情况下，如何使用pip安装指定版本的包</title>
      <link href="/posts/5.html"/>
      <url>/posts/5.html</url>
      
        <content type="html"><![CDATA[<p>最近下了个python的爬虫，需要python2运行，但是需要requests库，kali上没有pip</p><p>安装requests的库之后却仍旧提示没有安装。</p><p>我们需要把requests的库约束在python2下：</p><p>只要在最开始加python2 - m即可。如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python2 <span class="token operator">-</span>m pip install requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简单又快速。</p>]]></content>
      
      
      <categories>
          
          <category> pip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> Grammer </tag>
            
            <tag> picture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统的学习</title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<h1 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h1><p><strong>程序段</strong>，<strong>数据段</strong>，<strong>PCB</strong>三部分组成了<strong>进程实体</strong>（进程映像）。</p><p><strong>数据段</strong>：全局变量，局部变量等变量。</p><p><strong>程序段</strong>：程序代码。</p><p><strong>PCB</strong>：进程标识符PID（唯一值，类似身份证号），用户标识符UID，各种寄存器的值（进程切换时把当前进程的运行情况记录下来保存到PCB中，例如执行到程序的哪一句话），<strong>PCB</strong>是进程存在的唯一标志！。</p><p><strong>和进程相关的数据都存在于PCB中</strong></p><p>进程是进程实体的<strong>运行过程</strong>，是系统进行资源分配和调度的一个独立单位。</p><p>进程实体是<strong>静态的</strong>，进程则是<strong>动态</strong>的。</p><h1 id="进程的组织"><a href="#进程的组织" class="headerlink" title="进程的组织"></a>进程的组织</h1><p>多个进程怎么组织在一起</p><p>1.链接方式</p><p>执行指针：–&gt;PCB2（单个处理器只有一个进程处于运行状态）</p><p>就绪队列指针：–&gt;PCB5–&gt;PCB1–&gt;PCB4（优先级高的在队首）</p><p>阻塞队列指针：–&gt;PCB3</p><p>2.索引方式</p><p><img src="https://s2.loli.net/2021/12/08/K4MGszODVP5YXky.png" alt="image-20211208185235432"></p><p><img src="https://s2.loli.net/2021/12/08/ZHJg1Q3jIqawYux.png" alt="image-20211208185251291"></p><p><img src="https://s2.loli.net/2021/12/08/P7igHDY4seT8ACU.png" alt="image-20211208185308033"></p><p><img src="https://s2.loli.net/2021/12/08/pUZiAKGHaxnX9R3.png" alt="image-20211208185419932"></p><h1 id="进程的的状态与转换"><a href="#进程的的状态与转换" class="headerlink" title="进程的的状态与转换"></a>进程的的状态与转换</h1><p><img src="https://s2.loli.net/2021/12/08/L6MRO3Cl2yxITtc.png" alt="image-20211208185610085"></p><p><img src="https://s2.loli.net/2021/12/08/j3mBgKJqscfUG5l.png" alt="image-20211208185743538"></p><p><img src="https://s2.loli.net/2021/12/08/3Lgcy9T52lduAHk.png" alt="image-20211208185937907"></p><p><img src="https://s2.loli.net/2021/12/08/e2cKSwpXfMGolYB.png" alt="image-20211208190254316"></p><p><img src="https://s2.loli.net/2021/12/08/yIxLnGZjBWeYlPR.png" alt="image-20211208190328625"></p><h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><p><img src="https://s2.loli.net/2021/12/08/RnQwUlzmrE7d49J.png" alt="image-20211208190432753"></p><p><img src="https://s2.loli.net/2021/12/08/x1gsOXVcZaYzyh9.png" alt="image-20211208190441706"></p><p><strong>进程控制简单理解：实现进程状态转换。</strong></p><p><img src="https://s2.loli.net/2021/12/08/earlY2MHGVI71zb.png" alt="image-20211208190720302"></p><p><img src="https://s2.loli.net/2021/12/08/9wMHB7iSRh5XOPq.png" alt="image-20211208190901158"></p><p><img src="https://s2.loli.net/2021/12/08/5apYjs8dOKJ1bkq.png" alt="image-20211208191100937"></p><p><img src="https://s2.loli.net/2021/12/08/DY8jqyFMuwJKbnG.png" alt="image-20211208191109882"></p><p><img src="https://s2.loli.net/2021/12/08/8IEcdiXNsKyzT1l.png" alt="image-20211208191243493"></p><p><img src="https://s2.loli.net/2021/12/08/lRy3mCw4ckvfiAW.png" alt="image-20211208191423472"></p><h1 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h1><p><img src="https://s2.loli.net/2021/12/08/HKEcCrB1hMFAStd.png" alt="image-20211208191531635"></p><p><img src="https://s2.loli.net/2021/12/08/91qYnTypjQeAIbS.png" alt="image-20211208191702501"></p><p><img src="https://s2.loli.net/2021/12/08/rkjEasQ9RTyZfuC.png" alt="image-20211208191838166"></p><p><img src="https://s2.loli.net/2021/12/08/a8xkcQYOP6b9Mij.png" alt="image-20211208192035835"></p><p><img src="https://s2.loli.net/2021/12/08/EZN75l1AritB3Kg.png" alt="image-20211208192634820"></p><p><img src="https://s2.loli.net/2021/12/08/BVxITqw6rmtUHfJ.png" alt="image-20211208192642887"></p><h1 id="线程概念-多线程模型"><a href="#线程概念-多线程模型" class="headerlink" title="线程概念 多线程模型"></a>线程概念 多线程模型</h1><p><img src="https://s2.loli.net/2021/12/08/4X5dTFNBzGmVPju.png" alt="image-20211208192952372"></p><p><img src="https://s2.loli.net/2021/12/08/8obuCyTZPDJezvI.png" alt="image-20211208193255470"></p><p><img src="https://s2.loli.net/2021/12/08/SI4GzBDuUktWRhJ.png" alt="image-20211208193554766"></p><p><img src="https://s2.loli.net/2021/12/08/usnVleYFxRhWJHi.png" alt="image-20211208193625643"></p><p><img src="https://s2.loli.net/2021/12/08/Xq2gGmyIfk3idVl.png" alt="image-20211208193806903"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211208194444779.png" alt="image-20211208194444779"></p><p><img src="https://s2.loli.net/2021/12/08/oJWCt7XgvfYpkUc.png" alt="image-20211208194528229"></p><p><img src="https://s2.loli.net/2021/12/08/tLeIEv7aiKjOWQu.png" alt="image-20211208194616421"></p><p><img src="https://s2.loli.net/2021/12/08/S251w6VisKZqr8e.png" alt="image-20211208194759318"></p><p><img src="https://s2.loli.net/2021/12/08/a8r7fO6ykp1JBeg.png" alt="image-20211208194849903"></p><p><img src="https://s2.loli.net/2021/12/08/nDo97GategMkEuF.png" alt="image-20211208194940323"></p><p><img src="https://s2.loli.net/2021/12/08/tYMX34zG8wdOrcN.png" alt="image-20211208194952751"></p><h1 id="处理及调度-概念，层次"><a href="#处理及调度-概念，层次" class="headerlink" title="处理及调度 概念，层次"></a>处理及调度 概念，层次</h1><p><img src="https://s2.loli.net/2021/12/08/FDYWxcjuK1UaoX4.png" alt="image-20211208195130379"></p><p><img src="https://s2.loli.net/2021/12/08/BvWMunq5kVNo4JK.png" alt="image-20211208195316917"></p><p><img src="https://s2.loli.net/2021/12/08/eEqkhM2b471SwIR.png" alt="image-20211208204817226"></p><p><img src="https://s2.loli.net/2021/12/08/2CQEu43vXYnRZPO.png" alt="image-20211208205112632"></p><p><img src="https://s2.loli.net/2021/12/08/hKsRTmPukCUW76b.png" alt="image-20211208205312023"></p><p><img src="https://s2.loli.net/2021/12/08/6NRPndw2VGT9apD.png" alt="image-20211208205359176"></p><p><img src="https://s2.loli.net/2021/12/08/IYhrE4OMPoeBLNg.png" alt="image-20211208205512387"></p><p><img src="https://s2.loli.net/2021/12/08/QYgtidxvu4WeNBX.png" alt="image-20211208205520604"></p><h1 id="进程调度的时机-切换与过程-调度方式"><a href="#进程调度的时机-切换与过程-调度方式" class="headerlink" title="进程调度的时机 切换与过程 调度方式"></a>进程调度的时机 切换与过程 调度方式</h1><p><img src="https://s2.loli.net/2021/12/08/s63pjQECyY8n1MB.png" alt="image-20211208205702625"></p><p><img src="https://s2.loli.net/2021/12/08/74nRSthpUF9KP6H.png" alt="image-20211208205825495"></p><p><img src="https://s2.loli.net/2021/12/08/7UnKf6TW8NVhriq.png" alt="image-20211208210251544"></p><p><img src="https://s2.loli.net/2021/12/08/zrRB5xMSGIWbF2c.png" alt="image-20211208210315410"></p><p><img src="https://s2.loli.net/2021/12/08/aDfCcWLwGZ8N7hl.png" alt="image-20211208210424824"></p><p><img src="https://s2.loli.net/2021/12/08/j2rxAvquUV1PTbC.png" alt="image-20211208210714360"></p><p><img src="https://s2.loli.net/2021/12/08/FICW2YvQSBwaUZo.png" alt="image-20211208210723530"></p><h1 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h1><p><img src="https://s2.loli.net/2021/12/08/VDS6UhI9mF1BrEw.png" alt="image-20211208211100022"></p><p><img src="https://s2.loli.net/2021/12/08/HwxXkAI4bcrznP5.png" alt="image-20211208211218857"></p><p><img src="https://s2.loli.net/2021/12/08/VEvRUpNxZSTCagX.png" alt="image-20211208211249048"></p><p><img src="https://s2.loli.net/2021/12/08/W5cdU6moVtMal28.png" alt="image-20211208211432208"></p><p><img src="https://s2.loli.net/2021/12/08/HwfnTW71K3NAxFO.png" alt="image-20211208211533459"></p><p><img src="https://s2.loli.net/2021/12/08/4f1rijlxEUztsAL.png" alt="image-20211208211648089"></p><p><img src="https://s2.loli.net/2021/12/08/vr6ZDSbgwIoP4t3.png" alt="image-20211208211748695"></p><p><img src="https://s2.loli.net/2021/12/08/5ZX1qew2B8vM4W7.png" alt="image-20211208211758900"></p><h1 id="调度算法（先来先服务，最短作业优先，最高响应比优先）"><a href="#调度算法（先来先服务，最短作业优先，最高响应比优先）" class="headerlink" title="调度算法（先来先服务，最短作业优先，最高响应比优先）"></a>调度算法（先来先服务，最短作业优先，最高响应比优先）</h1><p><img src="https://s2.loli.net/2021/12/08/SRxKNnmG2agTv1r.png" alt="image-20211208212540556"></p><p><img src="https://s2.loli.net/2021/12/08/BFWsZ43EhO62RTS.png" alt="image-20211208212632430"></p><p><img src="https://s2.loli.net/2021/12/08/jpf5EiokeLUuPMl.png" alt="image-20211208212901629"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211208212940114.png" alt="image-20211208212940114"></p><p><img src="https://s2.loli.net/2021/12/08/Cms6SY1IDlqUQx8.png" alt="image-20211208213213505"></p><p><img src="https://s2.loli.net/2021/12/08/a3e7stKT8MGIHy9.png" alt="image-20211208213402352"></p><p><img src="https://s2.loli.net/2021/12/08/LzKMTsJliWu1BQD.png" alt="image-20211208213544890"></p><p><img src="https://s2.loli.net/2021/12/08/AJQ1mDnXRxLeE4s.png" alt="image-20211208213726320"></p><p><img src="https://s2.loli.net/2021/12/08/JwFuZXGDiM8VfzQ.png" alt="image-20211208213830008"></p><p><img src="https://s2.loli.net/2021/12/08/FKBq9tQLxSNwkyC.png" alt="image-20211208213918122"></p><p><img src="https://s2.loli.net/2021/12/08/detA49znTrCHKOk.png" alt="image-20211208214109803"></p><p><img src="https://s2.loli.net/2021/12/08/H3YxWDkzeAaLqKj.png" alt="image-20211208214218133"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211208214315337.png" alt="image-20211208214315337"></p><h1 id="调度算法（时间片轮转，优先级调度，多级反馈队列）"><a href="#调度算法（时间片轮转，优先级调度，多级反馈队列）" class="headerlink" title="调度算法（时间片轮转，优先级调度，多级反馈队列）"></a>调度算法（时间片轮转，优先级调度，多级反馈队列）</h1><p><img src="https://s2.loli.net/2021/12/08/OcybnlhBve9pxqd.png" alt="image-20211208214503506"></p><p><img src="https://s2.loli.net/2021/12/08/kszORIhgVJGFvSd.png" alt="image-20211208215322771"></p><p><img src="https://s2.loli.net/2021/12/08/GMfUJiQlxYTsSWu.png" alt="image-20211208215432455"></p><p><img src="https://s2.loli.net/2021/12/08/g5Yxr4BAWG1coQw.png" alt="image-20211208215546863"></p><p><img src="https://s2.loli.net/2021/12/08/oKT3NIE2jtfQids.png" alt="image-20211208215609882"></p><p><img src="https://s2.loli.net/2021/12/08/BubcRZ7DIj1WykQ.png" alt="image-20211208215707145"></p><p><img src="https://s2.loli.net/2021/12/08/IECj4FrYtGgLJZS.png" alt="image-20211208215921887"></p><p><img src="https://s2.loli.net/2021/12/08/fRLjY18mh4wIsaH.png" alt="image-20211208220050940"></p><p><img src="https://s2.loli.net/2021/12/08/XglncHAa7K6q4BN.png" alt="image-20211208220340319"></p><p><img src="https://s2.loli.net/2021/12/08/MuUh7VXbFdKOk3l.png" alt="image-20211208220441104"></p><p><img src="https://s2.loli.net/2021/12/08/ObA6kp4zaNUPuow.png" alt="image-20211208220516286"></p><p><img src="https://s2.loli.net/2021/12/08/3ITKeAPaytLWRwf.png" alt="image-20211208221136100"></p><p><img src="https://s2.loli.net/2021/12/08/4xvJTDCmglVn6cH.png" alt="image-20211208221334824"></p><p><img src="https://s2.loli.net/2021/12/08/rR1Mv2CXDAjiTSd.png" alt="image-20211208221353264"></p><p><img src="https://s2.loli.net/2021/12/08/IiMb6ksFTHXJjdR.png" alt="image-20211208221528598"></p><h1 id="进程同步，进程互斥"><a href="#进程同步，进程互斥" class="headerlink" title="进程同步，进程互斥"></a>进程同步，进程互斥</h1><p><img src="https://s2.loli.net/2021/12/08/xPHphqU32MyeFuY.png" alt="image-20211208221836391"></p><p><img src="https://s2.loli.net/2021/12/08/MbmTN82apyKdh1W.png" alt="image-20211208221916155"></p><p><img src="https://s2.loli.net/2021/12/08/hF19IoqvRJ7bYWk.png" alt="image-20211208222023481"></p><p><img src="https://s2.loli.net/2021/12/08/GC8RlQ2tOqIgrhb.png" alt="image-20211208222142303"></p><p><img src="https://s2.loli.net/2021/12/08/joRFk5SafMOwbmV.png" alt="image-20211208222241678"></p><p><img src="https://s2.loli.net/2021/12/08/BH4NPUSolGakTjn.png" alt="image-20211208222252145"></p><h1 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h1><p><img src="https://s2.loli.net/2021/12/08/1INLVUdcTYxDiw3.png" alt="image-20211208222359580"></p><p><img src="https://s2.loli.net/2021/12/08/fQkIPLAW3NDMy9n.png" alt="image-20211208222551689"></p><p><img src="https://s2.loli.net/2021/12/08/OkRXAIaf9DK2zc5.png" alt="image-20211208222637316"></p><p><img src="https://s2.loli.net/2021/12/08/ErM6VHXzI1mvwNk.png" alt="image-20211208222902581"></p><p><img src="https://s2.loli.net/2021/12/08/hGV2UxHe4nOl3Xw.png" alt="image-20211208222913611"></p><p><img src="https://s2.loli.net/2021/12/08/9TgUkzeN4SXvrKY.png" alt="image-20211208223106163"></p><p><img src="https://s2.loli.net/2021/12/08/T3uX7jhCdqKbIFR.png" alt="image-20211208223440852"></p><p><img src="https://s2.loli.net/2021/12/08/I2EsX9kwa5BtAvP.png" alt="image-20211208223544280"></p><p><img src="https://s2.loli.net/2021/12/08/WxsEtbwUOFo2Gul.png" alt="image-20211208223551792"></p><p><img src="https://s2.loli.net/2021/12/08/GeNYKHgbj1oS3VB.png" alt="image-20211208223612104"></p><h1 id="进程互斥的硬件实现方法"><a href="#进程互斥的硬件实现方法" class="headerlink" title="进程互斥的硬件实现方法"></a>进程互斥的硬件实现方法</h1><p><img src="https://s2.loli.net/2021/12/08/ezMJ3gQTIrNk762.png" alt="image-20211208223741338"></p><p><img src="https://s2.loli.net/2021/12/08/LGmAW54781UlweS.png" alt="image-20211208224328243"></p><p><img src="https://s2.loli.net/2021/12/08/439DrcwnztNvMxI.png" alt="image-20211208224520064"></p><p><img src="https://s2.loli.net/2021/12/08/1GZ3lQc8wBfCVnX.png" alt="image-20211208224530359"></p><h1 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h1><p><img src="https://s2.loli.net/2021/12/08/IVFQ96Abz4TZGaR.png" alt="image-20211208224653757"></p><p><img src="https://s2.loli.net/2021/12/08/5etjDXwKSqBQYbI.png" alt="image-20211208224921652"></p><p><img src="https://s2.loli.net/2021/12/08/FiXVxvrIwfpRjH6.png" alt="image-20211208225250064"></p><p><img src="https://s2.loli.net/2021/12/08/WDM1nabJ5hXq3uS.png" alt="image-20211208225504033"></p><p><img src="https://s2.loli.net/2021/12/08/Co536I9VOnYciry.png" alt="image-20211208225730693"></p><p><img src="https://s2.loli.net/2021/12/08/ntSV942GCElyaNW.png" alt="image-20211208225922333"></p><p><img src="https://s2.loli.net/2021/12/08/3PCBpWiYfTNo164.png" alt="image-20211208230007431"></p><h1 id="用信号量机制实现进程互斥，同步，前驱关系"><a href="#用信号量机制实现进程互斥，同步，前驱关系" class="headerlink" title="用信号量机制实现进程互斥，同步，前驱关系"></a>用信号量机制实现进程互斥，同步，前驱关系</h1><p><img src="https://s2.loli.net/2021/12/09/AdW1v5ep9C632ST.png" alt="image-20211209102924127"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209110307783.png" alt="image-20211209110307783"></p><p><img src="https://s2.loli.net/2021/12/09/SWNuaRivfQLIUXK.png" alt="image-20211209110414482"></p><p><img src="https://s2.loli.net/2021/12/09/7Mfvj58FmPXGSCD.png" alt="image-20211209110609975"></p><p><img src="https://s2.loli.net/2021/12/09/dar6Lomb8j9TfnW.png" alt="image-20211209110937172"></p><p><img src="https://s2.loli.net/2021/12/09/LWvRqDFJxCTAnrk.png" alt="image-20211209111043373"></p><h1 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h1><p><img src="https://s2.loli.net/2021/12/09/fGMeSrIFpNVzA5O.png" alt="image-20211209111415477"></p><p><img src="https://s2.loli.net/2021/12/09/CIMVlRzX8owxdt3.png" alt="image-20211209111725245"></p><p><img src="https://s2.loli.net/2021/12/09/MdmscUKuTjWnlVe.png" alt="image-20211209111731127"></p><p><img src="https://s2.loli.net/2021/12/09/27LGA5V8yOmWuH3.png" alt="image-20211209111921152"></p><p><img src="https://s2.loli.net/2021/12/09/raUGZSdhlfB5TWp.png" alt="image-20211209112119322"></p><p><img src="https://s2.loli.net/2021/12/09/yo8cuEWmMxdTDew.png" alt="image-20211209112146471"></p><p><img src="https://s2.loli.net/2021/12/09/nIZoFLs7pbGEmK8.png" alt="image-20211209112327690"></p><h1 id="多生产者-多消费者"><a href="#多生产者-多消费者" class="headerlink" title="多生产者-多消费者"></a>多生产者-多消费者</h1><p><img src="https://s2.loli.net/2021/12/09/rlEMPxdqbgImXVG.png" alt="image-20211209112511306"></p><p><img src="https://s2.loli.net/2021/12/09/XazZjrdeDINyb3J.png" alt="image-20211209112816320"></p><p><img src="https://s2.loli.net/2021/12/09/ZF7HT9SuoflhNPR.png" alt="image-20211209113136272"></p><p><img src="https://s2.loli.net/2021/12/09/E9hxCQc4nrAJlkz.png" alt="image-20211209113211930"></p><p><img src="https://s2.loli.net/2021/12/09/ovN6jACcyuzRWVD.png" alt="image-20211209113419625"></p><p><img src="https://s2.loli.net/2021/12/09/9tqSTXbDZowv3Uh.png" alt="image-20211209113656256"></p><h1 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h1><p><img src="https://s2.loli.net/2021/12/09/nKyF1pMlSRYWoH3.png" alt="image-20211209113838628"></p><p><img src="https://s2.loli.net/2021/12/09/sA56zn7YNdTgofw.png" alt="image-20211209114118987"></p><p><img src="https://s2.loli.net/2021/12/09/Sy9QgTmZBJPOUDK.png" alt="image-20211209114226267"></p><p><img src="https://s2.loli.net/2021/12/09/FTNGhl9t7jrXAvf.png" alt="image-20211209114426325"></p><h1 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h1><p><img src="https://s2.loli.net/2021/12/09/gCByF4qKb3XeEvM.png" alt="image-20211209114835138"></p><p><img src="https://s2.loli.net/2021/12/09/lQP2W1Ut8NjwvVD.png" alt="image-20211209115015567"></p><p><img src="https://s2.loli.net/2021/12/09/3vyYthLW2RsGe8q.png" alt="image-20211209115428214"></p><p><img src="https://s2.loli.net/2021/12/09/f426WayHj738Zl1.png" alt="image-20211209115800548"></p><p><img src="https://s2.loli.net/2021/12/09/18iZR6WszedyjrP.png" alt="image-20211209115929318"></p><h1 id="哲学家进餐"><a href="#哲学家进餐" class="headerlink" title="哲学家进餐"></a>哲学家进餐</h1><p><img src="https://s2.loli.net/2021/12/09/oMWQxuiwKmPS3EI.png" alt="image-20211209122815905"></p><p><img src="https://s2.loli.net/2021/12/09/Z3uw2rpUySQaYk1.png" alt="image-20211209123048983"></p><p><img src="https://s2.loli.net/2021/12/09/ud5h4YsG1kVfneK.png" alt="image-20211209123159989"></p><p><img src="https://s2.loli.net/2021/12/09/4smyWLDcniSHxRN.png" alt="image-20211209123520252"></p><p><img src="https://s2.loli.net/2021/12/09/QBwjYRAgeU5taZ8.png" alt="image-20211209123603223"></p><h1 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h1><p><img src="https://s2.loli.net/2021/12/09/b5oTiySmMW7vFht.png" alt="image-20211209123626305"></p><p><img src="https://s2.loli.net/2021/12/09/THqeBRDxGU8tsVm.png" alt="image-20211209123745100"></p><p><img src="https://s2.loli.net/2021/12/09/adXSvo1bsxR4FmV.png" alt="image-20211209124058669"></p><p><img src="https://s2.loli.net/2021/12/09/EBd3pvQOofSILD9.png" alt="image-20211209124453585"></p><p><img src="https://s2.loli.net/2021/12/09/XjvP1mcQUYWlpoy.png" alt="image-20211209124549638"></p><p><img src="https://s2.loli.net/2021/12/09/B5tP1SGaQexqgFM.png" alt="image-20211209124757004"></p><p><img src="https://s2.loli.net/2021/12/09/QROV1gMFTwqdByj.png" alt="image-20211209124853599"></p><p><img src="https://s2.loli.net/2021/12/09/WFuAEeRtmGr3Y45.png" alt="image-20211209124904937"></p><h1 id="死锁的概念"><a href="#死锁的概念" class="headerlink" title="死锁的概念"></a>死锁的概念</h1><p><img src="https://s2.loli.net/2021/12/09/GIyzqop9WdVuPHs.png" alt="image-20211209125022502"></p><p><img src="https://s2.loli.net/2021/12/09/CLX4dMBUSs3aAoV.png" alt="image-20211209130941656"></p><p><img src="https://s2.loli.net/2021/12/09/STkm7E9XoKV41GM.png" alt="image-20211209131320023"></p><p><img src="https://s2.loli.net/2021/12/09/J8Szq7ejiQrKDGW.png" alt="image-20211209131513773"></p><p><img src="https://s2.loli.net/2021/12/09/wDjYTbX7ykhNa4i.png" alt="image-20211209131851012"></p><p><img src="https://s2.loli.net/2021/12/09/fnS3PMIK8Y1F9lL.png" alt="image-20211209131944988"></p><p><img src="https://s2.loli.net/2021/12/09/yJIV59zw8doCB1j.png" alt="image-20211209132014806"></p><p><img src="https://s2.loli.net/2021/12/09/fLEUpRZkSID21qX.png" alt="image-20211209132025088"></p><h1 id="死锁的处理策略–预防死锁"><a href="#死锁的处理策略–预防死锁" class="headerlink" title="死锁的处理策略–预防死锁"></a>死锁的处理策略–预防死锁</h1><p><img src="https://s2.loli.net/2021/12/09/sSAjDz5kI64Nblv.png" alt="image-20211209132134648"></p><p><img src="https://s2.loli.net/2021/12/09/In3bhwSyuoxpDG6.png" alt="image-20211209132305346"></p><p><img src="https://s2.loli.net/2021/12/09/48oam2bL1RGw6IY.png" alt="image-20211209132453536"></p><p><img src="https://s2.loli.net/2021/12/09/iVZWyxYDhIf89nU.png" alt="image-20211209132622281"></p><p><img src="https://s2.loli.net/2021/12/09/7hAJyg42MzoP1uU.png" alt="image-20211209132851135"></p><p><img src="https://s2.loli.net/2021/12/09/nPT2v4KE1ZIkG3l.png" alt="image-20211209132857770"></p><h1 id="死锁的处理策略–避免死锁"><a href="#死锁的处理策略–避免死锁" class="headerlink" title="死锁的处理策略–避免死锁"></a>死锁的处理策略–避免死锁</h1><p><img src="https://s2.loli.net/2021/12/09/Wjh1VOtDdswHE3g.png" alt="image-20211209133038305"></p><p><img src="https://s2.loli.net/2021/12/09/6EUt21HNVKMdqC5.png" alt="image-20211209133222752"></p><p><img src="https://s2.loli.net/2021/12/09/98KCzEoQWwRiuNB.png" alt="image-20211209133354375"></p><p><img src="https://s2.loli.net/2021/12/09/LaJHn3TkfRCeo5d.png" alt="image-20211209133637066"></p><p><img src="https://s2.loli.net/2021/12/09/ipUnHMmASgbLwFB.png" alt="image-20211209133744422"></p><p><img src="https://s2.loli.net/2021/12/09/yQY2WI7LoF3ZksM.png" alt="image-20211209133856989"></p><p><img src="https://s2.loli.net/2021/12/09/Zk1XuUCrLAeaH9K.png" alt="image-20211209134000694"></p><p><img src="https://s2.loli.net/2021/12/09/SCc6Tota9GwgJq3.png" alt="image-20211209134157778"></p><p><img src="https://s2.loli.net/2021/12/09/PuoSfVraUzhXgTN.png" alt="image-20211209134312296"></p><h1 id="死锁的处理策略–检测和解除"><a href="#死锁的处理策略–检测和解除" class="headerlink" title="死锁的处理策略–检测和解除"></a>死锁的处理策略–检测和解除</h1><p><img src="https://s2.loli.net/2021/12/09/LBNwxtW8Ar9QJd3.png" alt="image-20211209134403608"></p><p><img src="https://s2.loli.net/2021/12/09/b59f7yFHditMmvB.png" alt="image-20211209134521997"></p><p><img src="https://s2.loli.net/2021/12/09/r746nYdGmcNzeOj.png" alt="image-20211209134728267"></p><p><img src="https://s2.loli.net/2021/12/09/JksYxbQucBO1egD.png" alt="image-20211209134824462"></p><p><img src="https://s2.loli.net/2021/12/09/Tg1U367uXabPVkH.png" alt="image-20211209134946852"></p><p><img src="https://s2.loli.net/2021/12/09/F7Auxk1Tl8H24Dq.png" alt="image-20211209135205808"></p><p><img src="https://s2.loli.net/2021/12/09/AjEcNPeKWkqlSmy.png" alt="image-20211209135224459"></p><h1 id="内存的基础知识"><a href="#内存的基础知识" class="headerlink" title="内存的基础知识"></a>内存的基础知识</h1><p><img src="https://s2.loli.net/2021/12/09/hNWZbcyY8LVkvdl.png" alt="image-20211209135934657"></p><p><img src="https://s2.loli.net/2021/12/09/GsnTeJx8D2NHdwm.png" alt="image-20211209140159512"></p><p><img src="https://s2.loli.net/2021/12/09/dK4Bm73gIrXfEpt.png" alt="image-20211209140241758"></p><p><img src="https://s2.loli.net/2021/12/09/pn9r42yKVabof8G.png" alt="image-20211209140504205"></p><p><img src="https://s2.loli.net/2021/12/09/R73cxaBZ5dWXJ6b.png" alt="image-20211209140658120"></p><p><img src="https://s2.loli.net/2021/12/09/F4BmWGjeOqw1Ukr.png" alt="image-20211209140821744"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209140943100.png" alt="image-20211209140943100"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209141052711.png" alt="image-20211209141052711"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209141153456.png" alt="image-20211209141153456"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209141325852.png" alt="image-20211209141325852"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209141331037.png" alt="image-20211209141331037"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209141343364.png" alt="image-20211209141343364"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209141447099.png" alt="image-20211209141447099"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209141600774.png" alt="image-20211209141600774"></p><h1 id="内存管理的概念"><a href="#内存管理的概念" class="headerlink" title="内存管理的概念"></a>内存管理的概念</h1><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209141822388.png" alt="image-20211209141822388"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209141929737.png" alt="image-20211209141929737"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209142023704.png" alt="image-20211209142023704"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209142151795.png" alt="image-20211209142151795"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209142249706.png" alt="image-20211209142249706"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209142325930.png" alt="image-20211209142325930"></p><h1 id="覆盖与交换"><a href="#覆盖与交换" class="headerlink" title="覆盖与交换"></a>覆盖与交换</h1><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209142418832.png" alt="image-20211209142418832"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209142518029.png" alt="image-20211209142518029"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209142724179.png" alt="image-20211209142724179"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209142900763.png" alt="image-20211209142900763"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209143032709.png" alt="image-20211209143032709"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209143324030.png" alt="image-20211209143324030"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209143330947.png" alt="image-20211209143330947"></p><h1 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h1><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209143947744.png" alt="image-20211209143947744"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209144200881.png" alt="image-20211209144200881"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209144416590.png" alt="image-20211209144416590"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209144604264.png" alt="image-20211209144604264"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209144747369.png" alt="image-20211209144747369"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209144851723.png" alt="image-20211209144851723"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209145038751.png" alt="image-20211209145038751"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209145239106.png" alt="image-20211209145239106"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209145257080.png" alt="image-20211209145257080"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209145318734.png" alt="image-20211209145318734"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209150749228.png" alt="image-20211209150749228"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209151032775.png" alt="image-20211209151032775"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209151039129.png" alt="image-20211209151039129"></p><h1 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h1><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209151238282.png" alt="image-20211209151238282"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209152108288.png" alt="image-20211209152108288"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209154750911.png" alt="image-20211209154750911"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209155024765.png" alt="image-20211209155024765"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209155248704.png" alt="image-20211209155248704"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209155322361.png" alt="image-20211209155322361"></p><h1 id="基本分页存储管理的基本概念"><a href="#基本分页存储管理的基本概念" class="headerlink" title="基本分页存储管理的基本概念"></a>基本分页存储管理的基本概念</h1><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209155505158.png" alt="image-20211209155505158"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209155514352.png" alt="image-20211209155514352"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209160426497.png" alt="image-20211209160426497"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209160559877.png" alt="image-20211209160559877"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209160616874.png" alt="image-20211209160616874"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209160727887.png" alt="image-20211209160727887"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209161035808.png" alt="image-20211209161035808"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209161152274.png" alt="image-20211209161152274"></p><p><img src="https://s2.loli.net/2021/12/09/1d5IgVjetQiqRLl.png" alt="image-20211209161506299"></p><p><img src="https://s2.loli.net/2021/12/09/yirpGVICQ92a7fL.png" alt="image-20211209161616983"></p><p><img src="https://s2.loli.net/2021/12/09/uheMOAdpz1b8KXN.png" alt="image-20211209161756038"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209161909598.png" alt="image-20211209161909598"></p><p><img src="https://s2.loli.net/2021/12/09/aZcLySjE1XxRgwN.png" alt="image-20211209162148408"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209162406255.png" alt="image-20211209162406255"></p><h1 id="基本地址变换机构"><a href="#基本地址变换机构" class="headerlink" title="基本地址变换机构"></a>基本地址变换机构</h1><p><img src="https://s2.loli.net/2021/12/09/DuQGrIblh8qOBdt.png" alt="image-20211209162434143"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209162548328.png" alt="image-20211209162548328"></p><p><img src="https://s2.loli.net/2021/12/09/tAcdEOXPhfI7RsG.png" alt="image-20211209182210176"></p><p><img src="https://s2.loli.net/2021/12/09/bsZVJuwAGHn6YUz.png" alt="image-20211209182504701"></p><p><img src="https://s2.loli.net/2021/12/09/rUx5NkSq4Qszwat.png" alt="image-20211209182706392"></p><p><img src="https://s2.loli.net/2021/12/09/yht8akrKlNAIwQm.png" alt="image-20211209182928648"></p><p><img src="https://s2.loli.net/2021/12/09/CokVI3tsfxWRr5j.png" alt="image-20211209182938633"></p><h1 id="具有快表的地址变换机构"><a href="#具有快表的地址变换机构" class="headerlink" title="具有快表的地址变换机构"></a>具有快表的地址变换机构</h1><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209183947707.png" alt="image-20211209183947707"></p><p><img src="https://s2.loli.net/2021/12/09/PgL7rwFkIR6quDU.png" alt="image-20211209184350202"></p><p><img src="https://s2.loli.net/2021/12/09/v9fpikyGwE3dlXF.png" alt="image-20211209184628534"></p><p><img src="https://s2.loli.net/2021/12/09/L5c8SVmWa1OPxNu.png" alt="image-20211209184914001"></p><p><img src="C:\Users\86176\AppData\Roaming\Typora\typora-user-images\image-20211209184920672.png" alt="image-20211209184920672"></p><h1 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h1><p><img src="https://s2.loli.net/2021/12/09/KYMbw4mykHpiuNh.png" alt="image-20211209185026589"></p><p><img src="https://s2.loli.net/2021/12/09/Nh2cHemL1kwoxbi.png" alt="image-20211209190046976"></p><p><img src="https://s2.loli.net/2021/12/09/hz64ZLFDvYTgrwX.png" alt="image-20211209190236736"></p><p><img src="https://s2.loli.net/2021/12/09/T1xXZMUcIHjWsad.png" alt="image-20211209191417810"></p><p><img src="https://s2.loli.net/2021/12/09/YSZ64FsT7iukQKV.png" alt="image-20211209192053887"></p><p><img src="https://s2.loli.net/2021/12/09/wUanWXxpTdHZ4mK.png" alt="image-20211209193249088"></p><p><img src="https://s2.loli.net/2021/12/09/wqIiUW7bOsFJ9Vo.png" alt="image-20211209193955294"></p><p><img src="https://s2.loli.net/2021/12/09/frtXgzxjKICAmy8.png" alt="image-20211209194235741"></p><h1 id="基本分段存储方式"><a href="#基本分段存储方式" class="headerlink" title="基本分段存储方式"></a>基本分段存储方式</h1><p><img src="https://s2.loli.net/2021/12/09/HKT2NmouIhJEOBp.png" alt="image-20211209194656426"></p><p><img src="https://s2.loli.net/2021/12/09/3DaCGcYOojZ8zI9.png" alt="image-20211209200605515"></p><p><img src="https://s2.loli.net/2021/12/09/BpzlwU1ehZVHDaG.png" alt="image-20211209202012073"></p><h1 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h1><p><img src="https://s2.loli.net/2021/12/09/nGIdv3lOV75ShAU.png" alt="image-20211209203542783"></p><p><img src="https://s2.loli.net/2021/12/09/YdGS82ek4UA7CTJ.png" alt="image-20211209204345926"></p>]]></content>
      
      
      <categories>
          
          <category> pip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> Grammer </tag>
            
            <tag> picture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis的学习</title>
      <link href="/posts/0008.html"/>
      <url>/posts/0008.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><p>MyBatis 本是apache的一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/3406069">开源项目</a>iBatis, 2010年这个<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE/477803">项目</a>由apache software foundation 迁移到了[google code](<a href="https://baike.baidu.com/item/google">https://baike.baidu.com/item/google</a> code/2346604)，并且改名为MyBatis 。2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341">Github</a>。</p><p>iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E5%B1%82/3584971">持久层</a>框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）</p><p>当前，最新版本是MyBatis 3.5.7 ，其发布时间是2021年4月21日。</p><p>持久层：数据访问层。</p><p>JDBC:六个步骤：</p><h5 id="1-注册驱动"><a href="#1-注册驱动" class="headerlink" title="1.注册驱动"></a>1.注册驱动</h5><h5 id="2-获取数据库连接对象Connection"><a href="#2-获取数据库连接对象Connection" class="headerlink" title="2.获取数据库连接对象Connection"></a>2.获取数据库连接对象Connection</h5><h5 id="3-获取执行sql语句的执行者对象Statement"><a href="#3-获取执行sql语句的执行者对象Statement" class="headerlink" title="3.获取执行sql语句的执行者对象Statement"></a>3.获取执行sql语句的执行者对象Statement</h5><h5 id="4-执行sql语句-获取结果"><a href="#4-执行sql语句-获取结果" class="headerlink" title="4.执行sql语句,获取结果"></a>4.执行sql语句,获取结果</h5><h5 id="5-处理结果"><a href="#5-处理结果" class="headerlink" title="5.处理结果"></a>5.处理结果</h5><h5 id="6-释放资源-IO流"><a href="#6-释放资源-IO流" class="headerlink" title="6.释放资源(IO流)"></a>6.释放资源(IO流)</h5><p>Mybatis是增强的JDBC，提供了创建和销毁Connecttion,Statement,Result的能力，提供了执行sql语句的能力，把结果集循环转化成List集合的能力。</p><p>开发人员只需要提供sql语句。</p><h1 id="1-创建新项目"><a href="#1-创建新项目" class="headerlink" title="1.创建新项目"></a>1.创建新项目</h1><p>点击file-&gt;new project-&gt;empty project-&gt;输入项目地址，没有目录IDEA就会自己创建。</p><p>再点击Modules-&gt;+(加号)</p><p>在如图所示：</p><p><img src="https://i.loli.net/2021/11/16/ecArPCEvTJZiUsR.png" alt="image-20211116193620990"></p><p>再一直点下一步，到了选Maven仓库的时候</p><p>如图所示，选择之前下载好的仓库</p><p><img src="https://i.loli.net/2021/11/16/VFaTR4KCmwIZnBc.png" alt="image-20211116193939674"></p><p>然后点finish，等待创建成功</p><p><img src="https://i.loli.net/2021/11/16/BqFpyizh15KOGmC.png" alt="image-20211116194055168"></p><p>JDK信息记得设置成1.8</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-使用Mybatis实现JDBC具体步骤"><a href="#2-使用Mybatis实现JDBC具体步骤" class="headerlink" title="2.使用Mybatis实现JDBC具体步骤"></a>2.使用Mybatis实现JDBC具体步骤</h1><p>1.新建表</p><p>2.加入Maven的Mybatis的坐标，Mysql的jar包的依赖</p><p>3.创建表的实体类</p><p>4.创建持久层的Dao接口，定义操作数据库的方法</p><p>5.创建Mybatis使用的配置方法（sql映射文件，里面写sql语句的，一个表一个sql映射文件）（xml文件）</p><p>写在Dao类接口同一目录下。(文件名称和接口保持一致)</p><p>6.Mybatis配置文件（一个项目一个）（数据库连接信息和sql映射文件的位置信息）</p><p>7.创建Test类，使用Mybatis访问数据库</p><h1 id="3-加入依赖（坐标信息）"><a href="#3-加入依赖（坐标信息）" class="headerlink" title="3.加入依赖（坐标信息）"></a>3.加入依赖（坐标信息）</h1><p>建议去官网找坐标信息<a href="https://mybatis.org/mybatis-3/">Mybatis官网</a></p><p>Mybatis的坐标信息</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mysql的坐标信息</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-接口Dao类的配置"><a href="#4-接口Dao类的配置" class="headerlink" title="4.接口Dao类的配置"></a>4.接口Dao类的配置</h1><p>StudentDao.xml接口Dao类的配置文件里面应该写什么：</p><p>格式：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>  <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.Dao.StudentDao<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectStudents<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.domain.Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select * from Blog where id = #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>约束文件，下面语句规定了xml中应该出现的标签。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>  <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面语句，命名空间，可以是自定义的字符串，应是Dao接口的全限定名称</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.Dao.StudentDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>怎么复制文件路径：</p><p><img src="https://i.loli.net/2021/11/16/EWHmgtCu8p3LFbw.png" alt="image-20211116201021295"></p><p>不懂得标签，对应着不同得数据库操作。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>//表示查询操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spdate</span><span class="token punctuation">&gt;</span></span>//更新数据库，update sql语句<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span><span class="token punctuation">&gt;</span></span>//表示插入，insert语句<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span><span class="token punctuation">&gt;</span></span>//表示删除，执行的delete语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>标签中有个id属性，sql语句得唯一标识，Mybatis使用id的值，来找到需要执行的sql语句，建议使用方法名。</p><p>resultType: sql语句执行后，结果集类型的List，可以通过遍历resultType，得到java对象。（类的全限定名称）//org.example.domain.Student</p><h1 id="5-Mybatis数据库的配置文件（）"><a href="#5-Mybatis数据库的配置文件（）" class="headerlink" title="5.Mybatis数据库的配置文件（）"></a>5.Mybatis数据库的配置文件（）</h1><p>配置文件在src/main/resources目录下,名字是mybatis.xml</p><p>官网介绍：XML 配置文件中包含了对 MyBatis 系统的核心设置，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager）。后面会再探讨 XML 配置文件的详细内容，这里先给出一个简单的示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>  <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    //环境配置：数据库的连接信息    //default：和某个environment的id值一样，表示使用的是哪个数据库的连接信息，访问那个数据库。  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mydev<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      //environment：数据库的配置信息，环境。      //id:唯一值，自定义，环境的名称。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mydev<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        //transactionManager：mybatis的事务类型        //type:JDBC      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        //dataSource：表示数据库源，连接数据库。        //type:表示数据源的类型，POOLED表示使用连接池      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          //下面四行，数据库的连接配置信息，name的值不能更改，不可自定义        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>    //sql mapper（sql映射文件）的位置，一个mapper对应着一个sql映射文件    //从类路径开始的路径信息。target/clasess（类路径） 图1.1  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/example/Dao/StudentDao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>约束文件：<code>&lt;!DOCTYPE configuration   PUBLIC "-//mybatis.org//DTD Config 3.0//EN"   "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</code></p><p>图1.1：<img src="https://i.loli.net/2021/11/16/4B9A5tbP6OzkWVi.png" alt="image-20211116210412443"></p><h1 id="6-main使用Mybatis的主要流程"><a href="#6-main使用Mybatis的主要流程" class="headerlink" title="6.main使用Mybatis的主要流程"></a>6.main使用Mybatis的主要流程</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//从类路径开始的路径信息。target/clasess（类路径）</span><span class="token comment">//访问mybatis读取student数据</span><span class="token comment">//1.定义mybatis主配置文件的名称, 从类路径的根开始（target/clasess）</span><span class="token class-name">String</span> config<span class="token operator">=</span><span class="token string">"mybatis.xml"</span><span class="token punctuation">;</span><span class="token comment">//2.读取这个config表示的文件</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.创建了SqlSessionFactoryBuilder对象</span><span class="token class-name">SqlSessionFactoryBuilder</span> builder  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.创建SqlSessionFactory对象</span><span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.获取SqlSession对象，从SqlSessionFactory中获取SqlSession</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6.【重要】指定要执行的sql语句的标识。  sql映射文件中的namespace + "." + 标签的id值</span><span class="token comment">//String sqlId = "com.bjpowernode.dao.StudentDao" + "." + "selectStudents";</span><span class="token class-name">String</span> sqlId <span class="token operator">=</span> <span class="token string">"org.example.Dao.StudentDao.selectStudents"</span><span class="token punctuation">;</span><span class="token comment">//7. 重要】执行sql语句，通过sqlId找到语句</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> studentList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8.输出结果</span><span class="token comment">//studentList.forEach( stu -&gt; System.out.println(stu));</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu <span class="token operator">:</span> studentList<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询的学生="</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//9.关闭SqlSession对象</span>sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首次运行代码时，出现报错：</p><p><img src="https://i.loli.net/2021/11/16/uTWrqscXEaSbn5Y.png" alt="image-20211116212514839"></p><p>解决方法：file-&gt;settings-&gt;搜索runner-&gt;勾选Delegate IDE Bulid /run actions to Maven（将依赖交给Maven来做，随便把jre调成1.8）</p><p><img src="https://i.loli.net/2021/11/16/AbiZ8kXORF3CGVI.png" alt="image-20211116212559055"></p><h1 id="7-处理报错信息"><a href="#7-处理报错信息" class="headerlink" title="7.处理报错信息"></a>7.处理报错信息</h1><p>运行后出现以下报错</p><p><code>Failed to execute goal org.codehaus.mojo:exec-maven-plugin:3.0.0:exec (default-cli) on project ch01: Command execution failed.</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">Exception in thread "main" java.io.IOException: Could not find resource resources/mybatis.xmlat org.apache.ibatis.io.Resources.getResourceAsStream(Resources.java:114)at org.apache.ibatis.io.Resources.getResourceAsStream(Resources.java:100)at org.example.MyApp.main(MyApp.java:22)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>提示resource下面没有mybatis.xml,点开target目录结构：</p><p><img src="https://i.loli.net/2021/11/17/GOJfXIoFnrVx2hA.png" alt="image-20211117091607699"></p><p>确实没有，问题应该出现在maven的pom.xml打包上，没有将resources下面的xml文件打包</p><p>经过调试在build中加入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--所在的目录--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就可以解决。</p><p>整个pom.xml文件如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ch01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--Mybatis的依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--所在的目录--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--所在的目录--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-插入语句"><a href="#8-插入语句" class="headerlink" title="8.插入语句"></a>8.插入语句</h1><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertStudent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>insert into student values(#{id},#{name},#{email},#{age})//类似于占位符，应是实体类的属性，将实体类的属性添加到insert语句中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">int rs = sqlSession.insert(sqlId,student);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="执行之后，再去数据库中看，没有数据添加，是因为mybatis不是自动提交事务，所以在insert-update-delete后要手工提交事务"><a href="#执行之后，再去数据库中看，没有数据添加，是因为mybatis不是自动提交事务，所以在insert-update-delete后要手工提交事务" class="headerlink" title="执行之后，再去数据库中看，没有数据添加，是因为mybatis不是自动提交事务，所以在insert,update,delete后要手工提交事务."></a>执行之后，再去数据库中看，没有数据添加，是因为mybatis不是自动提交事务，所以在insert,update,delete后要手工提交事务.</h5><p>需要手动提交</p><pre class="line-numbers language-none"><code class="language-none">sqlSession.commit();//提交事务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在mybatis中添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看见日志</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">Logging initialized using 'class org.apache.ibatis.logging.stdout.StdOutImpl' adapter.PooledDataSource forcefully closed/removed all connections.PooledDataSource forcefully closed/removed all connections.PooledDataSource forcefully closed/removed all connections.PooledDataSource forcefully closed/removed all connections.Opening JDBC ConnectionCreated connection 648936749.Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@26adfd2d]==&gt;  Preparing: insert into student values(?,?,?,?) ==&gt; Parameters: 1005(Integer), 刘备(String), liubei@qq.com(String), 38(Integer)&lt;==    Updates: 1Committing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@26adfd2d]执行insert结果1Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@26adfd2d]Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@26adfd2d]Returned connection 648936749 to pool.Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-Mybatis主要类的介绍"><a href="#9-Mybatis主要类的介绍" class="headerlink" title="9.Mybatis主要类的介绍"></a>9.Mybatis主要类的介绍</h1><p>  1 主要类的介绍<br>   1） Resources： mybatis中的一个类， 负责读取主配置文件<br>      InputStream in = Resources.getResourceAsStream(“mybatis.xml”);</p><p>2)SqlSessionFactoryBuilder : 创建SqlSessionFactory对象，<br>         SqlSessionFactoryBuilder builder  = new SqlSessionFactoryBuilder();<br>        //创建SqlSessionFactory对象<br>        SqlSessionFactory factory = builder.build(in);</p><p>  3）SqlSessionFactory ： 重量级对象， 程序创建一个对象耗时比较长，使用资源比较多。<br>        在整个项目中，有一个就够用了。</p><p>SqlSessionFactory:接口  ， 接口实现类： DefaultSqlSessionFactory<br>      SqlSessionFactory作用： 获取SqlSession对象。SqlSession sqlSession = factory.openSession();</p><p>openSession()方法说明：<br>       1. openSession() ：无参数的， 获取是非自动提交事务的SqlSession对象<br>            2. openSession(boolean): openSession(true)  获取自动提交事务的SqlSession.<br>                openSession(false)  非自动提交事务的SqlSession对象</p><p> 4)SqlSession:<br>   SqlSession接口 ：定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback()<br>   SqlSession接口的实现类DefaultSqlSession。</p><p>使用要求： SqlSession对象不是线程安全的，需要在方法内部使用， 在执行sql语句之前，使用openSession()获取SqlSession对象。<br>    在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammer </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven的学习</title>
      <link href="/posts/7.html"/>
      <url>/posts/7.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一、Maven的下载和简介"><a href="#一、Maven的下载和简介" class="headerlink" title="一、Maven的下载和简介"></a>一、Maven的下载和简介</h1><p>Mavne3.8.3 <a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a>  </p><p>Binary zip archive   | <a href="https://dlcdn.apache.org/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.zip">apache-maven-3.8.3-bin.zip</a></p><p><img src="https://s2.loli.net/2022/07/26/IvZTPqyBaN21bLM.png" alt="image-20220726170126962"></p><p>Maven：1.是一个项目的构建的工具，同时也能管理依赖。</p><p>​                2.下载jar包，管理jar包。</p><p>​                3.完成代码的编译，测试，打包，部署。</p><p>​                4.可以独立使用（命令行），也可以结合IDEA一起使用（图形化）。</p><hr><h1 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h1><p>系统变量里增加：</p><p>M2_HOME:D:\Maven\apache-maven-3.8.3</p><p>Path:%M2_HOME%\bin</p><pre class="line-numbers language-none"><code class="language-none">Typroa需要退出源代码模式，才能粘贴图片。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/11/12/x3JGoXwRU7MmLNv.png" alt="image-20211112212818857"></p><p>成功配置后:</p><p><img src="https://i.loli.net/2021/11/12/FdX3rcjb4OWCGT7.png" alt="image-20211112213059757"></p><hr><h1 id="三、Maven的目录结构"><a href="#三、Maven的目录结构" class="headerlink" title="三、Maven的目录结构"></a>三、Maven的目录结构</h1><p><img src="https://i.loli.net/2021/11/12/NbPCjmdURT9eQX2.png" alt="image-20211112213240335"></p><p>pom.xml：Maven的核心配置文件</p><p>main：主程序的java代码和配置文件</p><p>java：java文件</p><p>resources：java程序要使用的配置文件</p><hr><h1 id="四、Maven常用命令"><a href="#四、Maven常用命令" class="headerlink" title="四、Maven常用命令"></a>四、Maven常用命令</h1><p>在pom.xml所在文件夹执行Maven命令</p><pre class="line-numbers language-none"><code class="language-none">mvn -v //查看版本mvn compile //编译文件 第一次使用Maven会下载挺长时间，成功后会生成target结果目录，class文件就放在其中mvn clean //清理target目录，不删除install的包mvn test-compile //编译测试程序会在当前目录下生成target，里面放的是clss字节码文件mvn test //测试 会生成surefire-reports,保存测试结果。mvn package //打包主程序，根据pom.xml里的packaging来打包成jar还是warmvn install //安装主程序（打包本工程，按照pom.xml里的坐标保存到本地仓库）mvn deploy //部署主程序（本工程打包，保存到本地仓库，保存到私服仓库，还会自动部署到web容器之中。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="五、Maven插件"><a href="#五、Maven插件" class="headerlink" title="五、Maven插件"></a>五、Maven插件</h1><p>第一次运行mvn compile 会下载很多插件（jar包）    </p><p>默认存放在C:\Users\用户名.m2\repository（可以修改）</p><hr><h1 id="六、设置本机存放仓库（插件集合）的目录位置"><a href="#六、设置本机存放仓库（插件集合）的目录位置" class="headerlink" title="六、设置本机存放仓库（插件集合）的目录位置"></a>六、设置本机存放仓库（插件集合）的目录位置</h1><p>修改settings.xml，先提前备份。</p><p>settings.xml文件位置：D:\Maven\apache-maven-3.3.9\conf</p><p>修改<localrepository>（本身有注释）成D:\Maven\repository\repository</localrepository></p><p>再次运行：</p><p><img src="https://i.loli.net/2021/11/12/EBd3zlRaTsWY4qu.png" alt="image-20211112222356003"></p><p>依旧可以。</p><hr><h1 id="七、Maven仓库的使用"><a href="#七、Maven仓库的使用" class="headerlink" title="七、Maven仓库的使用"></a>七、Maven仓库的使用</h1><p>maven仓库的使用不需要人为参与、</p><p>开发人员需要使用mysql驱动—&gt;maven首先查本地仓库—&gt;私服—&gt;镜像—&gt;中央仓库</p><hr><h1 id="八、pom-项目对象模型"><a href="#八、pom-项目对象模型" class="headerlink" title="八、pom:项目对象模型"></a>八、pom:项目对象模型</h1><p>1.pom:项目对象模型，是一个pom.xml文件</p><p>modeIVersion:Maven模型的版本</p><p>groupid:公司名称（域名倒写）</p><p>artifactId:项目名称（公司内唯一的值）</p><p>version:三位数子标识符 快照（不稳定）：在版本后面带SNAPSHOT</p><p>三个合起来叫做坐标（gav）:唯一值，唯一标识一个项目。</p><p><groupid>公司域名的倒写</groupid><br><artifactid>自定义项目名称</artifactid><br><version>自定版本号</version></p><p>中央仓库:<a href="https://mvnrepository.com/%EF%BC%8C%E7%94%A8%E4%BB%A5%E6%90%9C%E7%B4%A2%E7%94%A8groupId%EF%BC%8CartifactId%E6%90%9C%E7%B4%A2%E9%A1%B9%E7%9B%AE">https://mvnrepository.com/，用以搜索用groupId，artifactId搜索项目</a></p><p><img src="https://i.loli.net/2021/11/13/L65oXA7HGJxPiDI.png" alt="image-20211113184640254"></p><p>2.packaging:打包之后的压缩文件的扩展名，可以是jar,war,rar,ear,pom,默认是jar</p><p>3.依赖 dependencies和和dependency,项目中需要的jar包等等。</p><p>下面是mysql的依赖，类似于java和python的import</p><dependencies><dependency>    <groupid>mysql</groupid>    <artifactid>mysql-connector-java</artifactid>    <version>8.0.27</version></dependency></dependencies><p>4.properties:设置属性</p><p>5.build:maven在进行项目的构建时， 配置信息，例如指定编译java代码使用的jdk的版本等</p><hr><h1 id="九、Maven生命周期，命令，插件"><a href="#九、Maven生命周期，命令，插件" class="headerlink" title="九、Maven生命周期，命令，插件"></a>九、Maven生命周期，命令，插件</h1><p>maven的生命周期：就是maven构建项目的过程，清理，编译，测试，报告，打包，安装，部署<br>maven的命令：maven独立使用，通过命令，完成maven的生命周期的执行。<br>maven可以使用命令，完成项目的清理，编译，测试等等<br>maven的插件： maven命令执行时，真正完成功能的是插件，插件就是一些jar文件， 一些类。</p><p>1.单元测试（测试方法）：用的是junit， junit是一个专门测试的框架（工具）。<br>junit测试的内容： 测试的是类中的方法， 每一个方法都是独立测试的。方法是测试的基本单位（单元）。<br>maven借助单元测试，批量的测试你类中的大量方法是否符合预期的。</p><p>2.使用步骤<br>     1.加入依赖，在pom.xml加入单元测试依赖<br>           <!-- 单元测试 --><br>         <dependency><br>            <groupid>junit</groupid><br>            <artifactid>junit</artifactid><br>            <version>4.11</version><br>            <scope>test</scope><br>        </dependency></p><p>2.在maven项目中的src/test/java目录下，创建测试程序。<br>        推荐的创建类和方法的提示：<br>         1.测试类的名称 是Test + 你要测试的类名<br>         2.测试的方法名称 是：Test + 方法名称</p><p>例如你要测试HelloMaven ,<br>         创建测试类 TestHelloMaven<br>       @Test<br>         public void testAdd(){<br>          测试HelloMaven的add方法是否正确<br>         }</p><p>其中testAdd叫做测试方法，它的定义规则<br>         1.方法是public的，必须的<br>         2.方法没有返回值， 必须的<br>         3.方法名称是自定义的，推荐是Test + 方法名称<br>         4.在方法的上面加入 @Test</p><p>3.mvn compile<br>       编译main/java/目录下的java 为class文件， 同时把class拷贝到 target/classes目录下面<br>        把main/resources目录下的所有文件 都拷贝到target/classes目录下</p><hr><h1 id="十、IDEA中配置-Maven"><a href="#十、IDEA中配置-Maven" class="headerlink" title="十、IDEA中配置 Maven"></a>十、IDEA中配置 Maven</h1><p>点击左上角File</p><p><img src="https://i.loli.net/2021/11/14/Z6U7rsC8lWm9qH1.png" alt="image-20211114180919715"></p><p>再点击Settings</p><p><img src="https://i.loli.net/2021/11/14/AZIg5qDT4zduscN.png" alt="image-20211114180936696"></p><p>搜索Maven</p><p><img src="https://i.loli.net/2021/11/14/d8YH2ZqSK3vlAoD.png" alt="image-20211114181059575"></p><p>设置成自己仓库的地址:</p><p><img src="https://i.loli.net/2021/11/14/XvisbfQY4z5o2j3.png" alt="image-20211114191858170"></p><h1 id="十一、创建基于Maven的Java项目"><a href="#十一、创建基于Maven的Java项目" class="headerlink" title="十一、创建基于Maven的Java项目"></a>十一、创建基于Maven的Java项目</h1><p>创建空的项目</p><p><img src="https://i.loli.net/2021/11/15/jiwoQL1RtkICAx5.png" alt="image-20211115110416637"></p><p>新建modle</p><p><img src="https://i.loli.net/2021/11/14/o3PXLrEl2iY9dtz.png" alt="image-20211114211357264"></p><p>选择</p><p><img src="https://i.loli.net/2021/11/14/bxNs6HQBamSgOiW.png" alt="image-20211114211446246"></p><p>如图</p><p><img src="https://i.loli.net/2021/11/14/Dfraw7jW6m9UoZs.png" alt="image-20211114211457876"></p><p>如图</p><p><img src="https://i.loli.net/2021/11/14/W4zEn7YHhPOlqob.png" alt="image-20211114211540937"></p><p>等会就应该创建成功。</p><hr><h1 id="十二、IDEA创建的Maven的pom-xml"><a href="#十二、IDEA创建的Maven的pom-xml" class="headerlink" title="十二、IDEA创建的Maven的pom.xml"></a>十二、IDEA创建的Maven的pom.xml</h1><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.IMNU<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ch02-test-maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>ch02-test-maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- FIXME change it to the project's website --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://www.example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 构建项目使用的编码 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--编译Java项目使用的版本--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--应该在什么Java版本运行--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-clean-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.22.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-install-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-deploy-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-site-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-project-info-reports-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="十三、IDEA创建的Maven的命令"><a href="#十三、IDEA创建的Maven的命令" class="headerlink" title="十三、IDEA创建的Maven的命令"></a>十三、IDEA创建的Maven的命令</h1><p>IDEA创建的Maven的命令就比命令行要简单得多</p><p>可以直接用鼠标点点点</p><p><img src="https://i.loli.net/2021/11/14/4KWFRvl1zeVjTXs.png" alt="image-20211114215457831"></p><hr><h1 id="十四、IDEA创建web项目"><a href="#十四、IDEA创建web项目" class="headerlink" title="十四、IDEA创建web项目"></a>十四、IDEA创建web项目</h1><p><img src="https://i.loli.net/2021/11/14/UCTWSYmFuqHGAZh.png" alt="image-20211114215828921"></p><p><img src="https://i.loli.net/2021/11/14/U6eRFtNqwHzJQxK.png" alt="image-20211114215844426"></p><p><img src="https://i.loli.net/2021/11/14/sHwV2jKJtoFcWNX.png" alt="image-20211114215859056"></p><p>别忘了settings里搜索runner</p><p>将<code> -DarchetypeCatalog=internal</code>填进VM options ，否则会自动从网上下载，速度很慢。</p><p><img src="https://i.loli.net/2021/11/14/GvUH5O2e83fLFdM.png" alt="image-20211114220622018"></p><p>web项目目录结构如下</p><p><img src="https://i.loli.net/2021/11/14/iL5lCworEmvY8sN.png" alt="image-20211114220846713"></p><p>至此就创建好了，记得改成1.8</p><pre class="line-numbers language-none"><code class="language-none">&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h1 id="十五、Maven的Web项目"><a href="#十五、Maven的Web项目" class="headerlink" title="十五、Maven的Web项目"></a>十五、Maven的Web项目</h1><p>servlet和jsp的依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;  &lt;version&gt;3.1.0&lt;/version&gt;  &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;  &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;  &lt;version&gt;2.1&lt;/version&gt;  &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个servlet后web.xml文件样例：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;&lt;web-app&gt;  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.IMUN.controller.HelloServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后开始配置Tomcat服务器</p><p>点击右上角的小锤子：</p><p><img src="https://i.loli.net/2021/11/14/qAUuQOB8a21NLER.png" alt="image-20211114222152252"></p><p>然后点击+，选中Tomcat server下的local</p><p><img src="https://i.loli.net/2021/11/14/7XzONPqRTxsE4ug.png" alt="image-20211114222256149"></p><p>然后开始部署项目，点击Deployment，然后点击+</p><p><img src="https://i.loli.net/2021/11/14/mAi13IhoVguwrdb.png" alt="image-20211114222425177"></p><p>点击下面的exploded</p><p><img src="https://i.loli.net/2021/11/14/NdTFfJMOE7VyG6l.png" alt="image-20211114222613857"></p><p>关于Tomcat都是在那个小锤子配置，关于update class and resource还有开启Tomcat服务后启动浏览器的配置，网站名字也可以在那更改。</p><p><img src="https://i.loli.net/2021/11/14/W3xTQJ4FZLCiB29.png" alt="image-20211114222837294"></p><p>如果已经导包成功还出现以下错误，按Ctrl能进入类中，但是就是报错找不到jar包</p><p><img src="https://i.loli.net/2021/11/15/DE3uqGHOaLrYmNy.png" alt="image-20211115103535938"></p><p>可以去settings中搜索maven，把Delegate IDE build/run actions to Maven打开，交给Mavne管理</p><p><img src="https://i.loli.net/2021/11/15/3CxWFKeYkXlzfdN.png" alt="image-20211115103614665"></p><hr><h1 id="十六、IDEA导入工程"><a href="#十六、IDEA导入工程" class="headerlink" title="十六、IDEA导入工程"></a>十六、IDEA导入工程</h1><p>点击左上角的file然后点击project structure</p><p><img src="https://i.loli.net/2021/11/15/rjbM7dnzasWBflO.png" alt="image-20211115110852067"></p><p>点击+，然后点击import Module导入项目模块</p><p><img src="https://i.loli.net/2021/11/15/8YdLvq1laR3NMrp.png" alt="image-20211115110919840"></p><p>选择项目模块的路径</p><p><img src="https://i.loli.net/2021/11/15/GDaMfL4PjEXulsv.png" alt="image-20211115110937259"></p><p>什么项目就选什么项目，点击Import module</p><p><img src="https://i.loli.net/2021/11/15/GK5uUnCitZezSdo.png" alt="image-20211115111013076"></p><p>然后设置导入模块的jdk</p><p><img src="https://i.loli.net/2021/11/15/z8mPWYAMt3LKUdN.png" alt="image-20211115111110289"></p><hr><h1 id="十七、依赖的作用的范围"><a href="#十七、依赖的作用的范围" class="headerlink" title="十七、依赖的作用的范围"></a>十七、依赖的作用的范围</h1><p><scope>:依赖范围</scope></p><p>scope的值有：compile：默认是他，编译，测试，打包，安装，部署都有。</p><p>​                          test：测试的时候有效。</p><p>​                          provided：提供者，打包安装的时候不提供jar包，不把jar包，一起打包。</p><p>表示依赖使用的范围，在maven构建的项目在哪些</p><p><img src="https://i.loli.net/2021/11/15/I5FGpQKX8fN3Aya.png" alt="image-20211115112947869"></p><hr><h1 id="十八、Maven常用操作"><a href="#十八、Maven常用操作" class="headerlink" title="十八、Maven常用操作"></a>十八、Maven常用操作</h1><p>1.maven的属性设置（pom.xml）</p><p><properties> 设置maven的常用属性</properties></p><p>2.maven的全局变量</p><p>自定义的属性，语法规则：</p><p>1.在<properties> 通过自定义标签声明变量（标签名就是变量名）</properties></p><p>2.在pom.xml文件中的其它位置，使用 ${标签名} 使用变量的值</p><p>自定义全局变量一般是定义 依赖的版本号， 当你的项目中要使用多个相同的版本号，<br>先使用全局变量定义， 在使用${变量名}</p><p>3.指定资源的插件：</p> <pre class="line-numbers language-none"><code class="language-none">&lt;build&gt;&lt;resources&gt;&lt;resource&gt;&lt;directory&gt;src/main/java&lt;/directory&gt;&lt;!--所在的目录--&gt;&lt;includes&gt;&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;&lt;include&gt;**/*.properties&lt;/include&gt;&lt;include&gt;**/*.xml&lt;/include&gt; //把上级目录和当前目录的后缀名为xml的文件，也打包。&lt;/includes&gt;&lt;!--filtering 选项 false 不启用过滤器， *.property 已经起到过滤的作用了 --&gt;&lt;filtering&gt;false&lt;/filtering&gt;&lt;/resource&gt;&lt;/resources&gt;&lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用：默认没有使用resources的时候， maven执行编译代码时， 会把src/main/resource目录中的文件拷贝到target/classes目录中。</p><p>对于src/main/java目录下的非java文件不处理，不拷贝到target/classes目录中。</p><p>如果想拷贝，加上<code>&lt;resource&gt;</code>标签就行,上面就是把文件后缀为properties和xml的文件也打包target/classes中。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammer </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换了电脑如何迁移Hexo</title>
      <link href="/posts/3.html"/>
      <url>/posts/3.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前用服务器写的博客效果一般，并且图片上传的很麻烦，于是想把hexo迁移到自己的电脑上。</p><h1 id="具体的操作步骤"><a href="#具体的操作步骤" class="headerlink" title="具体的操作步骤"></a>具体的操作步骤</h1><hr><h2 id="一、必要的软件安装"><a href="#一、必要的软件安装" class="headerlink" title="一、必要的软件安装"></a>一、必要的软件安装</h2><p> 安装Git客户端 <a href="https://git-scm.com/">https://git-scm.com/</a></p><p>安装Nodejs <a href="http://nodejs.cn/">http://nodejs.cn/</a></p><p>安装成功后：</p><p><img src="https://i.loli.net/2021/11/12/kN6c2ZA8uXgUIpy.png" alt="image-20211112202646165"></p><p><img src="https://i.loli.net/2021/11/12/q1o2iMsj7dGmH8p.png" alt="image-20211112202725049"></p><p><img src="https://i.loli.net/2021/11/12/dNutOM6r9QxCRYm.png" alt="image-20211112202743919"></p><hr><h2 id="二、Hexo源文件Copy到新的博客目录下"><a href="#二、Hexo源文件Copy到新的博客目录下" class="headerlink" title="二、Hexo源文件Copy到新的博客目录下"></a>二、Hexo源文件Copy到新的博客目录下</h2><p>只需要拷贝下面几个文件和目录</p><pre class="line-numbers language-none"><code class="language-none">_config.yml package.json scaffolds/ source/ themes/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><p>在博客目录下打开Git Bash，输入下面命令安装Hexo</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="四、进入博客目录，输入以下命令（感觉不对劲，只输入了前两条，但是可以）"><a href="#四、进入博客目录，输入以下命令（感觉不对劲，只输入了前两条，但是可以）" class="headerlink" title="四、进入博客目录，输入以下命令（感觉不对劲，只输入了前两条，但是可以）"></a>四、进入博客目录，输入以下命令（感觉不对劲，只输入了前两条，但是可以）</h2><pre class="line-numbers language-none"><code class="language-none">npm installnpm install hexo-deployer-git --save  // 文章部署到 git 的模块（下面为选择安装）npm install hexo-generator-feed --save  // 建立 RSS 订阅npm install hexo-generator-sitemap --save // 建立站点地图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="六、Github文件-git下载"><a href="#六、Github文件-git下载" class="headerlink" title="六、Github文件.git下载"></a>六、Github文件.git下载</h2><p>从之前的博客目录下，把.git文件放到本地博客目录下</p><p><img src="https://i.loli.net/2021/11/12/U3K6dL9incbFePq.png" alt="屏幕截图 2021-11-12 204519"></p><h2 id="七、Hexo常用命令"><a href="#七、Hexo常用命令" class="headerlink" title="七、Hexo常用命令"></a>七、Hexo常用命令</h2><h3 id="写作命令"><a href="#写作命令" class="headerlink" title="写作命令"></a>写作命令</h3><ol><li><p>新建分页：<code>hexo new page 名称</code></p></li><li><p>新建文章：<code>hexo new 名称</code>或<code>hexo n 名称</code></p></li><li><p>新建草稿：<code>hexo new draft 名称</code>或<code>hexo n draft 名称</code></p></li><li><p>草稿生成文章：<code>hexo publish 名称</code>或<code>hexo p 名称</code></p></li><li><p>草稿生成分页：<code>hexo publish page 名称</code>或<code>hexo p page 名称</code></p></li></ol><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><ol><li>清除已生成文件：<code>hexo clean</code></li><li>运行本地服务器（预览）：<code>hexo s</code></li><li>运行本地服务器（预览草稿）：<code>hexo s --drafts</code></li><li>生成静态文件：<code>hexo g</code></li><li>部署到服务器：<code>hexo d</code></li><li>生成并部署文件：<code>hexo g -d</code>或<code>hexo d -g</code></li></ol><h2 id="常见事项"><a href="#常见事项" class="headerlink" title="常见事项"></a>常见事项</h2><ol><li><p>多标签：</p><pre class="line-numbers language-none"><code class="language-none">tags: - 标签1- 标签2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或<code>tags: 【标签1,标签2】</code></p></li><li><p>设置阅读全文<br>方法一：在文章中使用<code>&lt;!-- more --&gt;</code>手动进行截断，Hexo 提供的方式（<strong>推荐</strong>）<br>方法二：在文章的 front-matter 中添加 description，并提供文章摘录<br>方法三：自动形成摘要，在 主题配置文件 中修改：</p><pre class="line-numbers language-none"><code class="language-none">auto_excerpt:  enable: true  length: 150<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>默认截取的长度为 150 字符，可以根据需要自行设定</p><blockquote><p>建议使用<code>&lt;!-- more --&gt;</code>（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。</p></blockquote><h2 id="八、发布运行"><a href="#八、发布运行" class="headerlink" title="八、发布运行"></a>八、发布运行</h2><pre class="line-numbers language-none"><code class="language-none">hexo cl&amp;&amp;hexo g&amp;&amp;hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="I-am-S1mple-wish-you-happiness"><a href="#I-am-S1mple-wish-you-happiness" class="headerlink" title=" I am S1mple,wish you happiness"></a><code> I am S1mple,wish you happiness</code></h3>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> Grammer </tag>
            
            <tag> picture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SoapClient反序列化SSSRF</title>
      <link href="/posts/17966.html"/>
      <url>/posts/17966.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>不让你看</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SUID提权</title>
      <link href="/posts/23638.html"/>
      <url>/posts/23638.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>不让你看</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MakrDown基本语法</title>
      <link href="/posts/6.html"/>
      <url>/posts/6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><pre class="line-numbers language-none"><code class="language-none"># 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h3 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h3><p>1.<strong>加粗</strong><br>要加粗的文字左右分别用两个*号包起来</p><p>2.<strong>斜体</strong><br>要倾斜的文字左右分别用一个*号包起来</p><p>3.<strong>斜体加粗</strong><br>要倾斜和加粗的文字左右分别用三个*号包起来</p><p>4.<strong>删除线</strong><br>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><strong>这是加粗的文字</strong></p><p><em>这是倾斜的文字</em>`</p><p><em><strong>这是斜体加粗的文字</strong></em></p><p><del>这是加删除线的文字</del></p><h3 id="三、分割线"><a href="#三、分割线" class="headerlink" title="三、分割线"></a>三、分割线</h3><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">---********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：<br>可以看到，显示效果一样的。</p><hr><hr><hr><h3 id="四、图片"><a href="#四、图片" class="headerlink" title="四、图片"></a>四、图片</h3><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">![图片alt](图片地址 ''图片title'')图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实直接Ctrl C+V也可以，更方便些。</p><p>还有图床，但是我懒了。</p><h3 id="五、超链接"><a href="#五、超链接" class="headerlink" title="五、超链接"></a>五、超链接</h3><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">[超链接名](超链接地址 "超链接title")title可加可不加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">[简书](http://jianshu.com)[百度](http://baidu.com)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果如下：</p><p><a href="http://jianshu.com/">简书</a></p><p><a href="http://baidu.com/">百度</a></p><h3 id="六、列表"><a href="#六、列表" class="headerlink" title="六、列表"></a>六、列表</h3><p>** 无序列表 **</p><p>语法：<br>无序列表用 - + * 任何一种都可以</p><pre class="line-numbers language-none"><code class="language-none">- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p><strong>有序列表</strong></p><p>语法：</p><p>数字加点</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h3 id="六、列表-1"><a href="#六、列表-1" class="headerlink" title="六、列表"></a>六、列表</h3><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h3 id="七、代码"><a href="#七、代码" class="headerlink" title="七、代码"></a>七、代码</h3><p>语法：</p><p>代码：代码之间分别用三个反引号包起来</p><p><code>```代码```</code></p><p>效果如下：</p><h3 id="I-am-S1mple-wish-you-happiness"><a href="#I-am-S1mple-wish-you-happiness" class="headerlink" title=" I am S1mple,wish you happiness"></a><code> I am S1mple,wish you happiness</code></h3>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> Grammer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署教程</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<ol><li>下载主题</li><li>运行<code>npm i</code>自动安装所需依赖</li><li>更改个人信息及所需配置</li><li>更改<code>_config.yml</code> 中 <code>deploy</code> 仓库地址</li><li>运行<code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo d</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
